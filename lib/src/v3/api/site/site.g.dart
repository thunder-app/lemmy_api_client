// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'site.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$GetSiteImpl _$$GetSiteImplFromJson(Map<String, dynamic> json) => _$GetSiteImpl(auth: json['auth'] as String?);

Map<String, dynamic> _$$GetSiteImplToJson(_$GetSiteImpl instance) => <String, dynamic>{if (instance.auth case final value?) 'auth': value};

_$CreateSiteImpl _$$CreateSiteImplFromJson(Map<String, dynamic> json) => _$CreateSiteImpl(
  name: json['name'] as String,
  sidebar: json['sidebar'] as String?,
  description: json['description'] as String?,
  icon: json['icon'] as String?,
  banner: json['banner'] as String?,
  enableDownvotes: json['enable_downvotes'] as bool?,
  enableNsfw: json['enable_nsfw'] as bool?,
  communityCreationAdminOnly: json['community_creation_admin_only'] as bool?,
  requireEmailVerification: json['require_email_verification'] as bool?,
  applicationQuestion: json['application_question'] as String?,
  privateInstance: json['private_instance'] as bool?,
  defaultTheme: json['default_theme'] as String?,
  defaultPostListingType: json['default_post_listing_type'] == null ? null : ListingType.fromJson(json['default_post_listing_type']),
  defaultSortType: json['default_sort_type'] == null ? null : SortType.fromJson(json['default_sort_type']),
  legalInformation: json['legal_information'] as String?,
  applicationEmailAdmins: json['application_email_admins'] as bool?,
  hideModlogModNames: json['hide_modlog_mod_names'] as bool?,
  discussionLanguages: (json['discussion_languages'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList(),
  slurFilterRegex: json['slur_filter_regex'] as String?,
  actorNameMaxLength: (json['actor_name_max_length'] as num?)?.toInt(),
  rateLimitMessage: (json['rate_limit_message'] as num?)?.toInt(),
  rateLimitMessagePerSecond: (json['rate_limit_message_per_second'] as num?)?.toInt(),
  rateLimitPost: (json['rate_limit_post'] as num?)?.toInt(),
  rateLimitPostPerSecond: (json['rate_limit_post_per_second'] as num?)?.toInt(),
  rateLimitRegister: (json['rate_limit_register'] as num?)?.toInt(),
  rateLimitRegisterPerSecond: (json['rate_limit_register_per_second'] as num?)?.toInt(),
  rateLimitImage: (json['rate_limit_image'] as num?)?.toInt(),
  rateLimitImagePerSecond: (json['rate_limit_image_per_second'] as num?)?.toInt(),
  rateLimitComment: (json['rate_limit_comment'] as num?)?.toInt(),
  rateLimitCommentPerSecond: (json['rate_limit_comment_per_second'] as num?)?.toInt(),
  rateLimitSearch: (json['rate_limit_search'] as num?)?.toInt(),
  rateLimitSearchPerSecond: (json['rate_limit_search_per_second'] as num?)?.toInt(),
  federationEnabled: json['federation_enabled'] as bool?,
  federationDebug: json['federation_debug'] as bool?,
  federationWorkerCount: (json['federation_worker_count'] as num?)?.toInt(),
  captchaEnabled: json['captcha_enabled'] as bool?,
  captchaDifficulty: json['captcha_difficulty'] as String?,
  allowedInstances: (json['allowed_instances'] as List<dynamic>?)?.map((e) => e as String).toList(),
  blockedInstances: (json['blocked_instances'] as List<dynamic>?)?.map((e) => e as String).toList(),
  taglines: (json['taglines'] as List<dynamic>?)?.map((e) => e as String).toList(),
  registrationMode: json['registration_mode'] == null ? null : RegistrationMode.fromJson(json['registration_mode'] as String),
  contentWarning: json['content_warning'] as String?,
  defaultPostListingMode: json['default_post_listing_mode'] as String?,
  auth: json['auth'] as String?,
);

Map<String, dynamic> _$$CreateSiteImplToJson(_$CreateSiteImpl instance) => <String, dynamic>{
  'name': instance.name,
  if (instance.sidebar case final value?) 'sidebar': value,
  if (instance.description case final value?) 'description': value,
  if (instance.icon case final value?) 'icon': value,
  if (instance.banner case final value?) 'banner': value,
  if (instance.enableDownvotes case final value?) 'enable_downvotes': value,
  if (instance.enableNsfw case final value?) 'enable_nsfw': value,
  if (instance.communityCreationAdminOnly case final value?) 'community_creation_admin_only': value,
  if (instance.requireEmailVerification case final value?) 'require_email_verification': value,
  if (instance.applicationQuestion case final value?) 'application_question': value,
  if (instance.privateInstance case final value?) 'private_instance': value,
  if (instance.defaultTheme case final value?) 'default_theme': value,
  if (instance.defaultPostListingType?.toJson() case final value?) 'default_post_listing_type': value,
  if (instance.defaultSortType?.toJson() case final value?) 'default_sort_type': value,
  if (instance.legalInformation case final value?) 'legal_information': value,
  if (instance.applicationEmailAdmins case final value?) 'application_email_admins': value,
  if (instance.hideModlogModNames case final value?) 'hide_modlog_mod_names': value,
  if (instance.discussionLanguages case final value?) 'discussion_languages': value,
  if (instance.slurFilterRegex case final value?) 'slur_filter_regex': value,
  if (instance.actorNameMaxLength case final value?) 'actor_name_max_length': value,
  if (instance.rateLimitMessage case final value?) 'rate_limit_message': value,
  if (instance.rateLimitMessagePerSecond case final value?) 'rate_limit_message_per_second': value,
  if (instance.rateLimitPost case final value?) 'rate_limit_post': value,
  if (instance.rateLimitPostPerSecond case final value?) 'rate_limit_post_per_second': value,
  if (instance.rateLimitRegister case final value?) 'rate_limit_register': value,
  if (instance.rateLimitRegisterPerSecond case final value?) 'rate_limit_register_per_second': value,
  if (instance.rateLimitImage case final value?) 'rate_limit_image': value,
  if (instance.rateLimitImagePerSecond case final value?) 'rate_limit_image_per_second': value,
  if (instance.rateLimitComment case final value?) 'rate_limit_comment': value,
  if (instance.rateLimitCommentPerSecond case final value?) 'rate_limit_comment_per_second': value,
  if (instance.rateLimitSearch case final value?) 'rate_limit_search': value,
  if (instance.rateLimitSearchPerSecond case final value?) 'rate_limit_search_per_second': value,
  if (instance.federationEnabled case final value?) 'federation_enabled': value,
  if (instance.federationDebug case final value?) 'federation_debug': value,
  if (instance.federationWorkerCount case final value?) 'federation_worker_count': value,
  if (instance.captchaEnabled case final value?) 'captcha_enabled': value,
  if (instance.captchaDifficulty case final value?) 'captcha_difficulty': value,
  if (instance.allowedInstances case final value?) 'allowed_instances': value,
  if (instance.blockedInstances case final value?) 'blocked_instances': value,
  if (instance.taglines case final value?) 'taglines': value,
  if (instance.registrationMode?.toJson() case final value?) 'registration_mode': value,
  if (instance.contentWarning case final value?) 'content_warning': value,
  if (instance.defaultPostListingMode case final value?) 'default_post_listing_mode': value,
  if (instance.auth case final value?) 'auth': value,
};

_$EditSiteImpl _$$EditSiteImplFromJson(Map<String, dynamic> json) => _$EditSiteImpl(
  name: json['name'] as String?,
  sidebar: json['sidebar'] as String?,
  description: json['description'] as String?,
  icon: json['icon'] as String?,
  banner: json['banner'] as String?,
  enableDownvotes: json['enable_downvotes'] as bool?,
  enableNsfw: json['enable_nsfw'] as bool?,
  communityCreationAdminOnly: json['community_creation_admin_only'] as bool?,
  requireEmailVerification: json['require_email_verification'] as bool?,
  applicationQuestion: json['application_question'] as String?,
  privateInstance: json['private_instance'] as bool?,
  defaultTheme: json['default_theme'] as String?,
  defaultPostListingType: json['default_post_listing_type'] == null ? null : ListingType.fromJson(json['default_post_listing_type']),
  defaultSortType: json['default_sort_type'] == null ? null : SortType.fromJson(json['default_sort_type']),
  legalInformation: json['legal_information'] as String?,
  applicationEmailAdmins: json['application_email_admins'] as bool?,
  hideModlogModNames: json['hide_modlog_mod_names'] as bool?,
  discussionLanguages: (json['discussion_languages'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList(),
  slurFilterRegex: json['slur_filter_regex'] as String?,
  actorNameMaxLength: (json['actor_name_max_length'] as num?)?.toInt(),
  rateLimitMessage: (json['rate_limit_message'] as num?)?.toInt(),
  rateLimitMessagePerSecond: (json['rate_limit_message_per_second'] as num?)?.toInt(),
  rateLimitPost: (json['rate_limit_post'] as num?)?.toInt(),
  rateLimitPostPerSecond: (json['rate_limit_post_per_second'] as num?)?.toInt(),
  rateLimitRegister: (json['rate_limit_register'] as num?)?.toInt(),
  rateLimitRegisterPerSecond: (json['rate_limit_register_per_second'] as num?)?.toInt(),
  rateLimitImage: (json['rate_limit_image'] as num?)?.toInt(),
  rateLimitImagePerSecond: (json['rate_limit_image_per_second'] as num?)?.toInt(),
  rateLimitComment: (json['rate_limit_comment'] as num?)?.toInt(),
  rateLimitCommentPerSecond: (json['rate_limit_comment_per_second'] as num?)?.toInt(),
  rateLimitSearch: (json['rate_limit_search'] as num?)?.toInt(),
  rateLimitSearchPerSecond: (json['rate_limit_search_per_second'] as num?)?.toInt(),
  federationEnabled: json['federation_enabled'] as bool?,
  federationDebug: json['federation_debug'] as bool?,
  federationWorkerCount: (json['federation_worker_count'] as num?)?.toInt(),
  captchaEnabled: json['captcha_enabled'] as bool?,
  captchaDifficulty: json['captcha_difficulty'] as String?,
  allowedInstances: (json['allowed_instances'] as List<dynamic>?)?.map((e) => e as String).toList(),
  blockedInstances: (json['blocked_instances'] as List<dynamic>?)?.map((e) => e as String).toList(),
  blockedUrls: (json['blocked_urls'] as List<dynamic>?)?.map((e) => e as String).toList(),
  taglines: (json['taglines'] as List<dynamic>?)?.map((e) => e as String).toList(),
  registrationMode: json['registration_mode'] == null ? null : RegistrationMode.fromJson(json['registration_mode'] as String),
  reportsEmailAdmins: json['reports_email_admins'] as bool?,
  contentWarning: json['content_warning'] as String?,
  defaultPostListingMode: json['default_post_listing_mode'] as String?,
  auth: json['auth'] as String?,
);

Map<String, dynamic> _$$EditSiteImplToJson(_$EditSiteImpl instance) => <String, dynamic>{
  if (instance.name case final value?) 'name': value,
  if (instance.sidebar case final value?) 'sidebar': value,
  if (instance.description case final value?) 'description': value,
  if (instance.icon case final value?) 'icon': value,
  if (instance.banner case final value?) 'banner': value,
  if (instance.enableDownvotes case final value?) 'enable_downvotes': value,
  if (instance.enableNsfw case final value?) 'enable_nsfw': value,
  if (instance.communityCreationAdminOnly case final value?) 'community_creation_admin_only': value,
  if (instance.requireEmailVerification case final value?) 'require_email_verification': value,
  if (instance.applicationQuestion case final value?) 'application_question': value,
  if (instance.privateInstance case final value?) 'private_instance': value,
  if (instance.defaultTheme case final value?) 'default_theme': value,
  if (instance.defaultPostListingType?.toJson() case final value?) 'default_post_listing_type': value,
  if (instance.defaultSortType?.toJson() case final value?) 'default_sort_type': value,
  if (instance.legalInformation case final value?) 'legal_information': value,
  if (instance.applicationEmailAdmins case final value?) 'application_email_admins': value,
  if (instance.hideModlogModNames case final value?) 'hide_modlog_mod_names': value,
  if (instance.discussionLanguages case final value?) 'discussion_languages': value,
  if (instance.slurFilterRegex case final value?) 'slur_filter_regex': value,
  if (instance.actorNameMaxLength case final value?) 'actor_name_max_length': value,
  if (instance.rateLimitMessage case final value?) 'rate_limit_message': value,
  if (instance.rateLimitMessagePerSecond case final value?) 'rate_limit_message_per_second': value,
  if (instance.rateLimitPost case final value?) 'rate_limit_post': value,
  if (instance.rateLimitPostPerSecond case final value?) 'rate_limit_post_per_second': value,
  if (instance.rateLimitRegister case final value?) 'rate_limit_register': value,
  if (instance.rateLimitRegisterPerSecond case final value?) 'rate_limit_register_per_second': value,
  if (instance.rateLimitImage case final value?) 'rate_limit_image': value,
  if (instance.rateLimitImagePerSecond case final value?) 'rate_limit_image_per_second': value,
  if (instance.rateLimitComment case final value?) 'rate_limit_comment': value,
  if (instance.rateLimitCommentPerSecond case final value?) 'rate_limit_comment_per_second': value,
  if (instance.rateLimitSearch case final value?) 'rate_limit_search': value,
  if (instance.rateLimitSearchPerSecond case final value?) 'rate_limit_search_per_second': value,
  if (instance.federationEnabled case final value?) 'federation_enabled': value,
  if (instance.federationDebug case final value?) 'federation_debug': value,
  if (instance.federationWorkerCount case final value?) 'federation_worker_count': value,
  if (instance.captchaEnabled case final value?) 'captcha_enabled': value,
  if (instance.captchaDifficulty case final value?) 'captcha_difficulty': value,
  if (instance.allowedInstances case final value?) 'allowed_instances': value,
  if (instance.blockedInstances case final value?) 'blocked_instances': value,
  if (instance.blockedUrls case final value?) 'blocked_urls': value,
  if (instance.taglines case final value?) 'taglines': value,
  if (instance.registrationMode?.toJson() case final value?) 'registration_mode': value,
  if (instance.reportsEmailAdmins case final value?) 'reports_email_admins': value,
  if (instance.contentWarning case final value?) 'content_warning': value,
  if (instance.defaultPostListingMode case final value?) 'default_post_listing_mode': value,
  if (instance.auth case final value?) 'auth': value,
};

_$BlockInstanceImpl _$$BlockInstanceImplFromJson(Map<String, dynamic> json) =>
    _$BlockInstanceImpl(auth: json['auth'] as String?, instanceId: (json['instance_id'] as num).toInt(), block: json['block'] as bool);

Map<String, dynamic> _$$BlockInstanceImplToJson(_$BlockInstanceImpl instance) => <String, dynamic>{
  if (instance.auth case final value?) 'auth': value,
  'instance_id': instance.instanceId,
  'block': instance.block,
};
