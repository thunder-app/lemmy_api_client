{
  "openapi": "3.0.0",
  "components": {
    "examples": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "SiteId": {
        "type": "number",
        "format": "double",
        "description": "The site id."
      },
      "DbUrl": {
        "type": "string"
      },
      "InstanceId": {
        "type": "number",
        "format": "double",
        "description": "The instance id."
      },
      "Site": {
        "properties": {
          "content_warning": {
            "type": "string",
            "description": "If present, nsfw content is visible by default. Should be displayed by frontends/clients\nwhen the site is first opened by a user."
          },
          "instance_id": {
            "$ref": "#/components/schemas/InstanceId"
          },
          "public_key": {
            "type": "string"
          },
          "inbox_url": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "The site inbox"
          },
          "last_refreshed_at": {
            "type": "string",
            "description": "The time the site was last refreshed."
          },
          "actor_id": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "The federated actor_id."
          },
          "description": {
            "type": "string",
            "description": "A shorter, one-line description of the site."
          },
          "banner": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "A banner url."
          },
          "icon": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "An icon URL."
          },
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "sidebar": {
            "type": "string",
            "description": "A sidebar for the site in markdown."
          },
          "name": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/SiteId"
          }
        },
        "required": [
          "instance_id",
          "public_key",
          "inbox_url",
          "last_refreshed_at",
          "actor_id",
          "published",
          "name",
          "id"
        ],
        "type": "object",
        "description": "The site."
      },
      "LocalSiteId": {
        "type": "number",
        "format": "double",
        "description": "The local site id."
      },
      "ListingType": {
        "type": "string",
        "enum": [
          "All",
          "Local",
          "Subscribed",
          "ModeratorView"
        ],
        "description": "A listing type for post and comment list fetches."
      },
      "RegistrationMode": {
        "type": "string",
        "enum": [
          "Closed",
          "RequireApplication",
          "Open"
        ],
        "description": "The registration mode for your site. Determines what happens after a user signs up."
      },
      "PostListingMode": {
        "type": "string",
        "enum": [
          "List",
          "Card",
          "SmallCard"
        ],
        "description": "A post-view mode that changes how multiple post listings look."
      },
      "PostSortType": {
        "type": "string",
        "enum": [
          "Active",
          "Hot",
          "New",
          "Old",
          "TopDay",
          "TopWeek",
          "TopMonth",
          "TopYear",
          "TopAll",
          "MostComments",
          "NewComments",
          "TopHour",
          "TopSixHour",
          "TopTwelveHour",
          "TopThreeMonths",
          "TopSixMonths",
          "TopNineMonths",
          "Controversial",
          "Scaled"
        ],
        "description": "The post sort types. See here for descriptions: https://join-lemmy.org/docs/en/users/03-votes-and-ranking.html"
      },
      "CommentSortType": {
        "type": "string",
        "enum": [
          "Hot",
          "Top",
          "New",
          "Old",
          "Controversial"
        ],
        "description": "The comment sort types. See here for descriptions: https://join-lemmy.org/docs/en/users/03-votes-and-ranking.html"
      },
      "FederationMode": {
        "type": "string",
        "enum": [
          "All",
          "Local",
          "Disable"
        ],
        "description": "The federation mode for an item"
      },
      "LocalSite": {
        "properties": {
          "disable_donation_dialog": {
            "type": "boolean",
            "description": "If this is true, users will never see the dialog asking to support Lemmy development with\ndonations."
          },
          "comment_downvotes": {
            "$ref": "#/components/schemas/FederationMode",
            "description": "What kind of comment downvotes your site allows."
          },
          "comment_upvotes": {
            "$ref": "#/components/schemas/FederationMode",
            "description": "What kind of comment upvotes your site allows."
          },
          "post_downvotes": {
            "$ref": "#/components/schemas/FederationMode",
            "description": "What kind of post downvotes your site allows."
          },
          "post_upvotes": {
            "$ref": "#/components/schemas/FederationMode",
            "description": "What kind of post upvotes your site allows."
          },
          "oauth_registration": {
            "type": "boolean",
            "description": "Whether or not external auth methods can auto-register users."
          },
          "default_comment_sort_type": {
            "$ref": "#/components/schemas/CommentSortType",
            "description": "Default value for [LocalUser.comment_sort_type]"
          },
          "default_post_sort_type": {
            "$ref": "#/components/schemas/PostSortType",
            "description": "Default value for [LocalUser.post_sort_type]"
          },
          "default_post_listing_mode": {
            "$ref": "#/components/schemas/PostListingMode",
            "description": "Default value for [LocalSite.post_listing_mode]"
          },
          "federation_signed_fetch": {
            "type": "boolean",
            "description": "Whether to sign outgoing Activitypub fetches with private key of local instance. Some\nFediverse instances and platforms require this."
          },
          "reports_email_admins": {
            "type": "boolean",
            "description": "Whether to email admins on new reports."
          },
          "registration_mode": {
            "$ref": "#/components/schemas/RegistrationMode"
          },
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "captcha_difficulty": {
            "type": "string",
            "description": "The captcha difficulty."
          },
          "captcha_enabled": {
            "type": "boolean",
            "description": "Whether captcha is enabled."
          },
          "federation_enabled": {
            "type": "boolean",
            "description": "Whether federation is enabled."
          },
          "actor_name_max_length": {
            "type": "number",
            "format": "double",
            "description": "The max actor name length."
          },
          "slur_filter_regex": {
            "type": "string",
            "description": "An optional regex to filter words."
          },
          "application_email_admins": {
            "type": "boolean",
            "description": "Whether new applications email admins."
          },
          "hide_modlog_mod_names": {
            "type": "boolean",
            "description": "Whether to hide mod names on the modlog."
          },
          "legal_information": {
            "type": "string",
            "description": "An optional legal disclaimer page."
          },
          "default_post_listing_type": {
            "$ref": "#/components/schemas/ListingType"
          },
          "default_theme": {
            "type": "string",
            "description": "The default front-end theme."
          },
          "private_instance": {
            "type": "boolean",
            "description": "Whether the instance is private or public."
          },
          "application_question": {
            "type": "string",
            "description": "An optional registration application questionnaire in markdown."
          },
          "require_email_verification": {
            "type": "boolean",
            "description": "Whether emails are required."
          },
          "community_creation_admin_only": {
            "type": "boolean",
            "description": "Whether only admins can create communities."
          },
          "site_setup": {
            "type": "boolean",
            "description": "True if the site is set up."
          },
          "site_id": {
            "$ref": "#/components/schemas/SiteId"
          },
          "id": {
            "$ref": "#/components/schemas/LocalSiteId"
          }
        },
        "required": [
          "disable_donation_dialog",
          "comment_downvotes",
          "comment_upvotes",
          "post_downvotes",
          "post_upvotes",
          "oauth_registration",
          "default_comment_sort_type",
          "default_post_sort_type",
          "default_post_listing_mode",
          "federation_signed_fetch",
          "reports_email_admins",
          "registration_mode",
          "published",
          "captcha_difficulty",
          "captcha_enabled",
          "federation_enabled",
          "actor_name_max_length",
          "application_email_admins",
          "hide_modlog_mod_names",
          "default_post_listing_type",
          "default_theme",
          "private_instance",
          "require_email_verification",
          "community_creation_admin_only",
          "site_setup",
          "site_id",
          "id"
        ],
        "type": "object",
        "description": "The local site."
      },
      "LocalSiteRateLimit": {
        "properties": {
          "import_user_settings_per_second": {
            "type": "number",
            "format": "double"
          },
          "import_user_settings": {
            "type": "number",
            "format": "double"
          },
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "search_per_second": {
            "type": "number",
            "format": "double"
          },
          "search": {
            "type": "number",
            "format": "double"
          },
          "comment_per_second": {
            "type": "number",
            "format": "double"
          },
          "comment": {
            "type": "number",
            "format": "double"
          },
          "image_per_second": {
            "type": "number",
            "format": "double"
          },
          "image": {
            "type": "number",
            "format": "double"
          },
          "register_per_second": {
            "type": "number",
            "format": "double"
          },
          "register": {
            "type": "number",
            "format": "double"
          },
          "post_per_second": {
            "type": "number",
            "format": "double"
          },
          "post": {
            "type": "number",
            "format": "double"
          },
          "message_per_second": {
            "type": "number",
            "format": "double"
          },
          "message": {
            "type": "number",
            "format": "double"
          },
          "local_site_id": {
            "$ref": "#/components/schemas/LocalSiteId"
          }
        },
        "required": [
          "import_user_settings_per_second",
          "import_user_settings",
          "published",
          "search_per_second",
          "search",
          "comment_per_second",
          "comment",
          "image_per_second",
          "image",
          "register_per_second",
          "register",
          "post_per_second",
          "post",
          "message_per_second",
          "message",
          "local_site_id"
        ],
        "type": "object",
        "description": "Rate limits for your site. Given in count / length of time."
      },
      "SiteAggregates": {
        "properties": {
          "users_active_half_year": {
            "type": "number",
            "format": "double",
            "description": "The number of users with any activity in the last half year."
          },
          "users_active_month": {
            "type": "number",
            "format": "double",
            "description": "The number of users with any activity in the last month."
          },
          "users_active_week": {
            "type": "number",
            "format": "double",
            "description": "The number of users with any activity in the last week."
          },
          "users_active_day": {
            "type": "number",
            "format": "double",
            "description": "The number of users with any activity in the last day."
          },
          "communities": {
            "type": "number",
            "format": "double"
          },
          "comments": {
            "type": "number",
            "format": "double"
          },
          "posts": {
            "type": "number",
            "format": "double"
          },
          "users": {
            "type": "number",
            "format": "double"
          },
          "site_id": {
            "$ref": "#/components/schemas/SiteId"
          }
        },
        "required": [
          "users_active_half_year",
          "users_active_month",
          "users_active_week",
          "users_active_day",
          "communities",
          "comments",
          "posts",
          "users",
          "site_id"
        ],
        "type": "object",
        "description": "Aggregate data for a site."
      },
      "SiteView": {
        "properties": {
          "counts": {
            "$ref": "#/components/schemas/SiteAggregates"
          },
          "local_site_rate_limit": {
            "$ref": "#/components/schemas/LocalSiteRateLimit"
          },
          "local_site": {
            "$ref": "#/components/schemas/LocalSite"
          },
          "site": {
            "$ref": "#/components/schemas/Site"
          }
        },
        "required": [
          "counts",
          "local_site_rate_limit",
          "local_site",
          "site"
        ],
        "type": "object",
        "description": "A site view."
      },
      "PersonId": {
        "type": "number",
        "format": "double",
        "description": "The person id."
      },
      "Person": {
        "properties": {
          "instance_id": {
            "$ref": "#/components/schemas/InstanceId"
          },
          "ban_expires": {
            "type": "string",
            "description": "When their ban, if it exists, expires, if at all."
          },
          "bot_account": {
            "type": "boolean",
            "description": "Whether the person is a bot account."
          },
          "matrix_user_id": {
            "type": "string",
            "description": "A matrix id, usually given an"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the person is deleted."
          },
          "banner": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "A URL for a banner."
          },
          "local": {
            "type": "boolean",
            "description": "Whether the person is local to our site."
          },
          "bio": {
            "type": "string",
            "description": "An optional bio, in markdown."
          },
          "actor_id": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "The federated actor_id."
          },
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "banned": {
            "type": "boolean",
            "description": "Whether the person is banned."
          },
          "avatar": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "A URL for an avatar."
          },
          "display_name": {
            "type": "string",
            "description": "A shorter display name."
          },
          "name": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/PersonId"
          }
        },
        "required": [
          "instance_id",
          "bot_account",
          "deleted",
          "local",
          "actor_id",
          "published",
          "banned",
          "name",
          "id"
        ],
        "type": "object",
        "description": "A person."
      },
      "PersonAggregates": {
        "properties": {
          "comment_count": {
            "type": "number",
            "format": "double"
          },
          "post_count": {
            "type": "number",
            "format": "double"
          },
          "person_id": {
            "$ref": "#/components/schemas/PersonId"
          }
        },
        "required": [
          "comment_count",
          "post_count",
          "person_id"
        ],
        "type": "object",
        "description": "Aggregate data for a person."
      },
      "PersonView": {
        "properties": {
          "is_admin": {
            "type": "boolean"
          },
          "counts": {
            "$ref": "#/components/schemas/PersonAggregates"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          }
        },
        "required": [
          "is_admin",
          "counts",
          "person"
        ],
        "type": "object",
        "description": "A person view."
      },
      "LanguageId": {
        "type": "number",
        "format": "double",
        "description": "The language id."
      },
      "Language": {
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/LanguageId"
          }
        },
        "required": [
          "name",
          "code",
          "id"
        ],
        "type": "object",
        "description": "A language."
      },
      "Tagline": {
        "properties": {
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "id": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "published",
          "content",
          "id"
        ],
        "type": "object",
        "description": "A tagline, shown at the top of your site."
      },
      "OAuthProviderId": {
        "type": "number",
        "format": "double",
        "description": "The oauth provider id."
      },
      "OAuthProvider": {
        "properties": {
          "use_pkce": {
            "type": "boolean",
            "description": "switch to enable or disable PKCE"
          },
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "description": "switch to enable or disable an oauth provider"
          },
          "account_linking_enabled": {
            "type": "boolean",
            "description": "Allows linking an OAUTH account to an existing user account by matching emails"
          },
          "auto_verify_email": {
            "type": "boolean",
            "description": "Automatically sets email as verified on registration"
          },
          "scopes": {
            "type": "string",
            "description": "Lists the scopes requested from users. Users will have to grant access to the requested scope\nat sign up."
          },
          "client_id": {
            "type": "string",
            "description": "The client_id is provided by the OAuth 2.0 provider and is a unique identifier to this\nservice"
          },
          "id_claim": {
            "type": "string",
            "description": "The OAuth 2.0 claim containing the unique user ID returned by the provider. Usually this\nshould be set to \"sub\"."
          },
          "userinfo_endpoint": {
            "type": "string",
            "description": "The UserInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the\nauthenticated End-User. This is defined in the OIDC specification."
          },
          "token_endpoint": {
            "type": "string",
            "description": "The token endpoint is used by the client to obtain an access token by presenting its\nauthorization grant or refresh token. This is usually provided by the OAUTH provider."
          },
          "authorization_endpoint": {
            "type": "string",
            "description": "The authorization endpoint is used to interact with the resource owner and obtain an\nauthorization grant. This is usually provided by the OAUTH provider."
          },
          "issuer": {
            "type": "string",
            "description": "The issuer url of the OAUTH provider."
          },
          "display_name": {
            "type": "string",
            "description": "The OAuth 2.0 provider name displayed to the user on the Login page"
          },
          "id": {
            "$ref": "#/components/schemas/OAuthProviderId"
          }
        },
        "required": [
          "use_pkce",
          "published",
          "enabled",
          "account_linking_enabled",
          "auto_verify_email",
          "scopes",
          "client_id",
          "id_claim",
          "userinfo_endpoint",
          "token_endpoint",
          "authorization_endpoint",
          "issuer",
          "display_name",
          "id"
        ],
        "type": "object",
        "description": "oauth provider with client_secret - should never be sent to the client"
      },
      "PublicOAuthProvider": {
        "$ref": "#/components/schemas/OAuthProvider"
      },
      "LocalSiteUrlBlocklist": {
        "properties": {
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "id": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "published",
          "url",
          "id"
        ],
        "type": "object"
      },
      "GetSiteResponse": {
        "properties": {
          "image_upload_disabled": {
            "type": "boolean"
          },
          "blocked_urls": {
            "items": {
              "$ref": "#/components/schemas/LocalSiteUrlBlocklist"
            },
            "type": "array"
          },
          "admin_oauth_providers": {
            "items": {
              "$ref": "#/components/schemas/OAuthProvider"
            },
            "type": "array"
          },
          "oauth_providers": {
            "items": {
              "$ref": "#/components/schemas/PublicOAuthProvider"
            },
            "type": "array",
            "description": "A list of external auth methods your site supports."
          },
          "tagline": {
            "$ref": "#/components/schemas/Tagline",
            "description": "If the site has any taglines, a random one is included here for displaying"
          },
          "discussion_languages": {
            "items": {
              "$ref": "#/components/schemas/LanguageId"
            },
            "type": "array"
          },
          "all_languages": {
            "items": {
              "$ref": "#/components/schemas/Language"
            },
            "type": "array"
          },
          "version": {
            "type": "string"
          },
          "admins": {
            "items": {
              "$ref": "#/components/schemas/PersonView"
            },
            "type": "array"
          },
          "site_view": {
            "$ref": "#/components/schemas/SiteView"
          }
        },
        "required": [
          "image_upload_disabled",
          "blocked_urls",
          "discussion_languages",
          "all_languages",
          "version",
          "admins",
          "site_view"
        ],
        "type": "object",
        "description": "An expanded response for a site."
      },
      "SiteResponse": {
        "properties": {
          "taglines": {
            "items": {
              "type": "number",
              "enum": [
                null
              ],
              "nullable": true
            },
            "type": "array",
            "description": "deprecated, use field `tagline` or /api/v4/tagline/list"
          },
          "site_view": {
            "$ref": "#/components/schemas/SiteView"
          }
        },
        "required": [
          "taglines",
          "site_view"
        ],
        "type": "object",
        "description": "The response for a site."
      },
      "CreateSite": {
        "properties": {
          "disable_donation_dialog": {
            "type": "boolean"
          },
          "comment_downvotes": {
            "$ref": "#/components/schemas/FederationMode"
          },
          "comment_upvotes": {
            "$ref": "#/components/schemas/FederationMode"
          },
          "post_downvotes": {
            "$ref": "#/components/schemas/FederationMode"
          },
          "post_upvotes": {
            "$ref": "#/components/schemas/FederationMode"
          },
          "content_warning": {
            "type": "string"
          },
          "oauth_registration": {
            "type": "boolean"
          },
          "registration_mode": {
            "$ref": "#/components/schemas/RegistrationMode"
          },
          "captcha_difficulty": {
            "type": "string"
          },
          "captcha_enabled": {
            "type": "boolean"
          },
          "federation_enabled": {
            "type": "boolean"
          },
          "rate_limit_search_per_second": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_search": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_comment_per_second": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_comment": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_image_per_second": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_image": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_register_per_second": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_register": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_post_per_second": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_post": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_message_per_second": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_message": {
            "type": "number",
            "format": "double"
          },
          "actor_name_max_length": {
            "type": "number",
            "format": "double"
          },
          "slur_filter_regex": {
            "type": "string"
          },
          "discussion_languages": {
            "items": {
              "$ref": "#/components/schemas/LanguageId"
            },
            "type": "array"
          },
          "hide_modlog_mod_names": {
            "type": "boolean"
          },
          "application_email_admins": {
            "type": "boolean"
          },
          "legal_information": {
            "type": "string"
          },
          "default_comment_sort_type": {
            "$ref": "#/components/schemas/CommentSortType"
          },
          "default_post_sort_type": {
            "$ref": "#/components/schemas/PostSortType"
          },
          "default_post_listing_mode": {
            "$ref": "#/components/schemas/PostListingMode"
          },
          "default_post_listing_type": {
            "$ref": "#/components/schemas/ListingType"
          },
          "default_theme": {
            "type": "string"
          },
          "private_instance": {
            "type": "boolean"
          },
          "application_question": {
            "type": "string"
          },
          "require_email_verification": {
            "type": "boolean"
          },
          "community_creation_admin_only": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "sidebar": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object",
        "description": "Creates a site. Should be done after first running lemmy."
      },
      "EditSite": {
        "properties": {
          "disable_donation_dialog": {
            "type": "boolean",
            "description": "If this is true, users will never see the dialog asking to support Lemmy development with\ndonations."
          },
          "comment_downvotes": {
            "$ref": "#/components/schemas/FederationMode",
            "description": "What kind of comment downvotes your site allows."
          },
          "comment_upvotes": {
            "$ref": "#/components/schemas/FederationMode",
            "description": "What kind of comment upvotes your site allows."
          },
          "post_downvotes": {
            "$ref": "#/components/schemas/FederationMode",
            "description": "What kind of post downvotes your site allows."
          },
          "post_upvotes": {
            "$ref": "#/components/schemas/FederationMode",
            "description": "What kind of post upvotes your site allows."
          },
          "oauth_registration": {
            "type": "boolean",
            "description": "Whether or not external auth methods can auto-register users."
          },
          "content_warning": {
            "type": "string",
            "description": "If present, nsfw content is visible by default. Should be displayed by frontends/clients\nwhen the site is first opened by a user."
          },
          "reports_email_admins": {
            "type": "boolean",
            "description": "Whether to email admins for new reports."
          },
          "registration_mode": {
            "$ref": "#/components/schemas/RegistrationMode"
          },
          "blocked_urls": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A list of blocked URLs"
          },
          "captcha_difficulty": {
            "type": "string",
            "description": "The captcha difficulty. Can be easy, medium, or hard"
          },
          "captcha_enabled": {
            "type": "boolean",
            "description": "Whether to enable captchas for signups."
          },
          "federation_enabled": {
            "type": "boolean",
            "description": "Whether to enable federation."
          },
          "rate_limit_search_per_second": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_search": {
            "type": "number",
            "format": "double",
            "description": "The number of searches allowed in a given time frame."
          },
          "rate_limit_comment_per_second": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_comment": {
            "type": "number",
            "format": "double",
            "description": "The number of comments allowed in a given time frame."
          },
          "rate_limit_image_per_second": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_image": {
            "type": "number",
            "format": "double",
            "description": "The number of image uploads allowed in a given time frame."
          },
          "rate_limit_register_per_second": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_register": {
            "type": "number",
            "format": "double",
            "description": "The number of registrations allowed in a given time frame."
          },
          "rate_limit_post_per_second": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_post": {
            "type": "number",
            "format": "double",
            "description": "The number of posts allowed in a given time frame."
          },
          "rate_limit_message_per_second": {
            "type": "number",
            "format": "double"
          },
          "rate_limit_message": {
            "type": "number",
            "format": "double",
            "description": "The number of messages allowed in a given time frame."
          },
          "actor_name_max_length": {
            "type": "number",
            "format": "double",
            "description": "The max length of actor names."
          },
          "slur_filter_regex": {
            "type": "string",
            "description": "A regex string of items to filter."
          },
          "discussion_languages": {
            "items": {
              "$ref": "#/components/schemas/LanguageId"
            },
            "type": "array",
            "description": "A list of allowed discussion languages."
          },
          "hide_modlog_mod_names": {
            "type": "boolean",
            "description": "Whether to hide moderator names from the modlog."
          },
          "application_email_admins": {
            "type": "boolean",
            "description": "Whether to email admins when receiving a new application."
          },
          "legal_information": {
            "type": "string",
            "description": "An optional page of legal information"
          },
          "default_comment_sort_type": {
            "$ref": "#/components/schemas/CommentSortType",
            "description": "The default comment sort, usually \"hot\""
          },
          "default_post_sort_type": {
            "$ref": "#/components/schemas/PostSortType",
            "description": "The default post sort, usually \"active\""
          },
          "default_post_listing_mode": {
            "$ref": "#/components/schemas/PostListingMode",
            "description": "Default value for listing mode, usually \"list\""
          },
          "default_post_listing_type": {
            "$ref": "#/components/schemas/ListingType",
            "description": "The default post listing type, usually \"local\""
          },
          "default_theme": {
            "type": "string",
            "description": "The default theme. Usually \"browser\""
          },
          "private_instance": {
            "type": "boolean",
            "description": "Whether your instance is public, or private."
          },
          "application_question": {
            "type": "string",
            "description": "Your application question form. This is in markdown, and can be many questions."
          },
          "require_email_verification": {
            "type": "boolean",
            "description": "Whether to require email verification."
          },
          "community_creation_admin_only": {
            "type": "boolean",
            "description": "Limits community creation to admins only."
          },
          "description": {
            "type": "string",
            "description": "A shorter, one line description of your site."
          },
          "sidebar": {
            "type": "string",
            "description": "A sidebar for the site, in markdown."
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object",
        "description": "Edits a site."
      },
      "SensitiveString": {
        "type": "string"
      },
      "GenerateTotpSecretResponse": {
        "properties": {
          "totp_secret_url": {
            "$ref": "#/components/schemas/SensitiveString"
          }
        },
        "required": [
          "totp_secret_url"
        ],
        "type": "object"
      },
      "LocalUserId": {
        "type": "number",
        "format": "double",
        "description": "The local user id."
      },
      "LocalUser": {
        "properties": {
          "hide_media": {
            "type": "boolean",
            "description": "Whether to hide posts containing images/videos"
          },
          "last_donation_notification": {
            "type": "string",
            "description": "The last time a donation request was shown to this user. If this is more than a year ago,\na new notification request should be shown."
          },
          "auto_mark_fetched_posts_as_read": {
            "type": "boolean",
            "description": "Whether to automatically mark fetched posts as read."
          },
          "default_comment_sort_type": {
            "$ref": "#/components/schemas/CommentSortType"
          },
          "collapse_bot_comments": {
            "type": "boolean",
            "description": "Whether to auto-collapse bot comments."
          },
          "enable_private_messages": {
            "type": "boolean",
            "description": "Whether a user can send / receive private messages"
          },
          "enable_animated_images": {
            "type": "boolean",
            "description": "Whether user avatars and inline images in the UI that are gifs should be allowed to play or\nshould be paused"
          },
          "enable_keyboard_navigation": {
            "type": "boolean",
            "description": "Whether to allow keyboard navigation (for browsing and interacting with posts and comments)."
          },
          "totp_2fa_enabled": {
            "type": "boolean"
          },
          "post_listing_mode": {
            "$ref": "#/components/schemas/PostListingMode",
            "description": "A post-view mode that changes how multiple post listings look."
          },
          "admin": {
            "type": "boolean",
            "description": "Whether the person is an admin."
          },
          "infinite_scroll_enabled": {
            "type": "boolean",
            "description": "Whether infinite scroll is enabled."
          },
          "blur_nsfw": {
            "type": "boolean"
          },
          "open_links_in_new_tab": {
            "type": "boolean",
            "description": "Open links in a new tab."
          },
          "accepted_application": {
            "type": "boolean",
            "description": "Whether their registration application has been accepted."
          },
          "email_verified": {
            "type": "boolean",
            "description": "Whether their email has been verified."
          },
          "show_read_posts": {
            "type": "boolean",
            "description": "Whether to show read posts."
          },
          "show_bot_accounts": {
            "type": "boolean",
            "description": "Whether to show bot accounts."
          },
          "send_notifications_to_email": {
            "type": "boolean"
          },
          "show_avatars": {
            "type": "boolean",
            "description": "Whether to show avatars."
          },
          "interface_language": {
            "type": "string"
          },
          "default_listing_type": {
            "$ref": "#/components/schemas/ListingType"
          },
          "default_post_sort_type": {
            "$ref": "#/components/schemas/PostSortType"
          },
          "theme": {
            "type": "string"
          },
          "show_nsfw": {
            "type": "boolean",
            "description": "Whether to show NSFW content."
          },
          "email": {
            "$ref": "#/components/schemas/SensitiveString"
          },
          "person_id": {
            "$ref": "#/components/schemas/PersonId",
            "description": "The person_id for the local user."
          },
          "id": {
            "$ref": "#/components/schemas/LocalUserId"
          }
        },
        "required": [
          "hide_media",
          "last_donation_notification",
          "auto_mark_fetched_posts_as_read",
          "default_comment_sort_type",
          "collapse_bot_comments",
          "enable_private_messages",
          "enable_animated_images",
          "enable_keyboard_navigation",
          "totp_2fa_enabled",
          "post_listing_mode",
          "admin",
          "infinite_scroll_enabled",
          "blur_nsfw",
          "open_links_in_new_tab",
          "accepted_application",
          "email_verified",
          "show_read_posts",
          "show_bot_accounts",
          "send_notifications_to_email",
          "show_avatars",
          "interface_language",
          "default_listing_type",
          "default_post_sort_type",
          "theme",
          "show_nsfw",
          "person_id",
          "id"
        ],
        "type": "object",
        "description": "A local user."
      },
      "LocalUserVoteDisplayMode": {
        "properties": {
          "upvote_percentage": {
            "type": "boolean"
          },
          "downvotes": {
            "type": "boolean"
          },
          "upvotes": {
            "type": "boolean"
          },
          "score": {
            "type": "boolean"
          }
        },
        "required": [
          "upvote_percentage",
          "downvotes",
          "upvotes",
          "score"
        ],
        "type": "object",
        "description": "The vote display settings for your user."
      },
      "LocalUserView": {
        "properties": {
          "counts": {
            "$ref": "#/components/schemas/PersonAggregates"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "local_user_vote_display_mode": {
            "$ref": "#/components/schemas/LocalUserVoteDisplayMode"
          },
          "local_user": {
            "$ref": "#/components/schemas/LocalUser"
          }
        },
        "required": [
          "counts",
          "person",
          "local_user_vote_display_mode",
          "local_user"
        ],
        "type": "object",
        "description": "A local user view."
      },
      "CommunityId": {
        "type": "number",
        "format": "double",
        "description": "The community id."
      },
      "CommunityVisibility": {
        "type": "string",
        "enum": [
          "Public",
          "LocalOnly",
          "Private"
        ],
        "description": "Defines who can browse and interact with content in a community."
      },
      "Community": {
        "properties": {
          "description": {
            "type": "string",
            "description": "A shorter, one-line description of the site."
          },
          "visibility": {
            "$ref": "#/components/schemas/CommunityVisibility"
          },
          "instance_id": {
            "$ref": "#/components/schemas/InstanceId"
          },
          "posting_restricted_to_mods": {
            "type": "boolean",
            "description": "Whether posting is restricted to mods only."
          },
          "hidden": {
            "type": "boolean",
            "description": "Whether the community is hidden."
          },
          "banner": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "A URL for a banner."
          },
          "icon": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "A URL for an icon."
          },
          "local": {
            "type": "boolean",
            "description": "Whether the community is local."
          },
          "actor_id": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "The federated actor_id."
          },
          "nsfw": {
            "type": "boolean",
            "description": "Whether its an NSFW community."
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the community has been deleted by its creator."
          },
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "removed": {
            "type": "boolean",
            "description": "Whether the community is removed by a mod."
          },
          "sidebar": {
            "type": "string",
            "description": "A sidebar for the community in markdown."
          },
          "title": {
            "type": "string",
            "description": "A longer title, that can contain other characters, and doesn't have to be unique."
          },
          "name": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "visibility",
          "instance_id",
          "posting_restricted_to_mods",
          "hidden",
          "local",
          "actor_id",
          "nsfw",
          "deleted",
          "published",
          "removed",
          "title",
          "name",
          "id"
        ],
        "type": "object",
        "description": "A community."
      },
      "CommunityFollowerView": {
        "properties": {
          "follower": {
            "$ref": "#/components/schemas/Person"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          }
        },
        "required": [
          "follower",
          "community"
        ],
        "type": "object",
        "description": "A community follower."
      },
      "CommunityModeratorView": {
        "properties": {
          "moderator": {
            "$ref": "#/components/schemas/Person"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          }
        },
        "required": [
          "moderator",
          "community"
        ],
        "type": "object",
        "description": "A community moderator."
      },
      "Instance": {
        "properties": {
          "version": {
            "type": "string"
          },
          "software": {
            "type": "string"
          },
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/InstanceId"
          }
        },
        "required": [
          "published",
          "domain",
          "id"
        ],
        "type": "object",
        "description": "A federated instance / site."
      },
      "MyUserInfo": {
        "properties": {
          "discussion_languages": {
            "items": {
              "$ref": "#/components/schemas/LanguageId"
            },
            "type": "array"
          },
          "person_blocks": {
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "type": "array"
          },
          "instance_blocks": {
            "items": {
              "$ref": "#/components/schemas/Instance"
            },
            "type": "array"
          },
          "community_blocks": {
            "items": {
              "$ref": "#/components/schemas/Community"
            },
            "type": "array"
          },
          "moderates": {
            "items": {
              "$ref": "#/components/schemas/CommunityModeratorView"
            },
            "type": "array"
          },
          "follows": {
            "items": {
              "$ref": "#/components/schemas/CommunityFollowerView"
            },
            "type": "array"
          },
          "local_user_view": {
            "$ref": "#/components/schemas/LocalUserView"
          }
        },
        "required": [
          "discussion_languages",
          "person_blocks",
          "instance_blocks",
          "community_blocks",
          "moderates",
          "follows",
          "local_user_view"
        ],
        "type": "object",
        "description": "Your user info."
      },
      "SuccessResponse": {
        "properties": {
          "success": {
            "type": "boolean"
          }
        },
        "required": [
          "success"
        ],
        "type": "object",
        "description": "A response that completes successfully."
      },
      "LoginToken": {
        "properties": {
          "user_agent": {
            "type": "string"
          },
          "ip": {
            "type": "string",
            "description": "IP address where login was made from, allows invalidating logins by IP address.\nCould be stored in truncated format, or store derived information for better privacy."
          },
          "published": {
            "type": "string",
            "description": "Time of login"
          },
          "user_id": {
            "$ref": "#/components/schemas/LocalUserId"
          }
        },
        "required": [
          "published",
          "user_id"
        ],
        "type": "object",
        "description": "Stores data related to a specific user login session."
      },
      "LocalImage": {
        "properties": {
          "published": {
            "type": "string"
          },
          "pictrs_alias": {
            "type": "string"
          },
          "local_user_id": {
            "$ref": "#/components/schemas/LocalUserId"
          }
        },
        "required": [
          "published",
          "pictrs_alias"
        ],
        "type": "object"
      },
      "LocalImageView": {
        "properties": {
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "local_image": {
            "$ref": "#/components/schemas/LocalImage"
          }
        },
        "required": [
          "person",
          "local_image"
        ],
        "type": "object",
        "description": "A local image view."
      },
      "ListMediaResponse": {
        "properties": {
          "images": {
            "items": {
              "$ref": "#/components/schemas/LocalImageView"
            },
            "type": "array"
          }
        },
        "required": [
          "images"
        ],
        "type": "object"
      },
      "ListMediaI": {
        "properties": {
          "limit": {
            "type": "number",
            "format": "double"
          },
          "page": {
            "type": "number",
            "format": "double"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "UpdateTotpResponse": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "enabled"
        ],
        "type": "object"
      },
      "UpdateTotp": {
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "totp_token": {
            "type": "string"
          }
        },
        "required": [
          "enabled",
          "totp_token"
        ],
        "type": "object"
      },
      "AdminAllowInstanceId": {
        "type": "number",
        "format": "double"
      },
      "AdminAllowInstance": {
        "properties": {
          "published": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "allowed": {
            "type": "boolean"
          },
          "admin_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "instance_id": {
            "$ref": "#/components/schemas/InstanceId"
          },
          "id": {
            "$ref": "#/components/schemas/AdminAllowInstanceId"
          }
        },
        "required": [
          "published",
          "allowed",
          "admin_person_id",
          "instance_id",
          "id"
        ],
        "type": "object"
      },
      "AdminAllowInstanceView": {
        "properties": {
          "admin": {
            "$ref": "#/components/schemas/Person"
          },
          "instance": {
            "$ref": "#/components/schemas/Instance"
          },
          "admin_allow_instance": {
            "$ref": "#/components/schemas/AdminAllowInstance"
          }
        },
        "required": [
          "instance",
          "admin_allow_instance"
        ],
        "type": "object",
        "description": "When an admin purges a post."
      },
      "AdminBlockInstanceId": {
        "type": "number",
        "format": "double"
      },
      "AdminBlockInstance": {
        "properties": {
          "published": {
            "type": "string"
          },
          "expires": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "blocked": {
            "type": "boolean"
          },
          "admin_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "instance_id": {
            "$ref": "#/components/schemas/InstanceId"
          },
          "id": {
            "$ref": "#/components/schemas/AdminBlockInstanceId"
          }
        },
        "required": [
          "published",
          "blocked",
          "admin_person_id",
          "instance_id",
          "id"
        ],
        "type": "object"
      },
      "AdminBlockInstanceView": {
        "properties": {
          "admin": {
            "$ref": "#/components/schemas/Person"
          },
          "instance": {
            "$ref": "#/components/schemas/Instance"
          },
          "admin_block_instance": {
            "$ref": "#/components/schemas/AdminBlockInstance"
          }
        },
        "required": [
          "instance",
          "admin_block_instance"
        ],
        "type": "object",
        "description": "When an admin purges a post."
      },
      "AdminPurgeCommentId": {
        "type": "number",
        "format": "double"
      },
      "PostId": {
        "type": "number",
        "format": "double",
        "description": "The post id."
      },
      "AdminPurgeComment": {
        "properties": {
          "published": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          },
          "admin_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/AdminPurgeCommentId"
          }
        },
        "required": [
          "published",
          "post_id",
          "admin_person_id",
          "id"
        ],
        "type": "object",
        "description": "When an admin purges a comment."
      },
      "Post": {
        "properties": {
          "scheduled_publish_time": {
            "type": "string",
            "description": "Time at which the post will be published. None means publish immediately."
          },
          "alt_text": {
            "type": "string",
            "description": "An optional alt_text, usable for image posts."
          },
          "url_content_type": {
            "type": "string"
          },
          "featured_local": {
            "type": "boolean",
            "description": "Whether the post is featured to its site."
          },
          "featured_community": {
            "type": "boolean",
            "description": "Whether the post is featured to its community."
          },
          "language_id": {
            "$ref": "#/components/schemas/LanguageId"
          },
          "embed_video_url": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "A video url for the link."
          },
          "local": {
            "type": "boolean",
            "description": "Whether the post is local."
          },
          "ap_id": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "The federated activity id / ap_id."
          },
          "thumbnail_url": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "A thumbnail picture url."
          },
          "embed_description": {
            "type": "string",
            "description": "A description for the link."
          },
          "embed_title": {
            "type": "string",
            "description": "A title for the link."
          },
          "nsfw": {
            "type": "boolean",
            "description": "Whether the post is NSFW."
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the post is deleted."
          },
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "locked": {
            "type": "boolean",
            "description": "Whether the post is locked."
          },
          "removed": {
            "type": "boolean",
            "description": "Whether the post is removed."
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          },
          "creator_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "body": {
            "type": "string",
            "description": "An optional post body, in markdown."
          },
          "url": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "An optional link / url for the post."
          },
          "name": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "featured_local",
          "featured_community",
          "language_id",
          "local",
          "ap_id",
          "nsfw",
          "deleted",
          "published",
          "locked",
          "removed",
          "community_id",
          "creator_id",
          "name",
          "id"
        ],
        "type": "object",
        "description": "A post."
      },
      "AdminPurgeCommentView": {
        "properties": {
          "post": {
            "$ref": "#/components/schemas/Post"
          },
          "admin": {
            "$ref": "#/components/schemas/Person"
          },
          "admin_purge_comment": {
            "$ref": "#/components/schemas/AdminPurgeComment"
          }
        },
        "required": [
          "post",
          "admin_purge_comment"
        ],
        "type": "object",
        "description": "When an admin purges a comment."
      },
      "AdminPurgeCommunityId": {
        "type": "number",
        "format": "double"
      },
      "AdminPurgeCommunity": {
        "properties": {
          "published": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "admin_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/AdminPurgeCommunityId"
          }
        },
        "required": [
          "published",
          "admin_person_id",
          "id"
        ],
        "type": "object",
        "description": "When an admin purges a community."
      },
      "AdminPurgeCommunityView": {
        "properties": {
          "admin": {
            "$ref": "#/components/schemas/Person"
          },
          "admin_purge_community": {
            "$ref": "#/components/schemas/AdminPurgeCommunity"
          }
        },
        "required": [
          "admin_purge_community"
        ],
        "type": "object",
        "description": "When an admin purges a community."
      },
      "AdminPurgePersonId": {
        "type": "number",
        "format": "double"
      },
      "AdminPurgePerson": {
        "properties": {
          "published": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "admin_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/AdminPurgePersonId"
          }
        },
        "required": [
          "published",
          "admin_person_id",
          "id"
        ],
        "type": "object",
        "description": "When an admin purges a person."
      },
      "AdminPurgePersonView": {
        "properties": {
          "admin": {
            "$ref": "#/components/schemas/Person"
          },
          "admin_purge_person": {
            "$ref": "#/components/schemas/AdminPurgePerson"
          }
        },
        "required": [
          "admin_purge_person"
        ],
        "type": "object",
        "description": "When an admin purges a person."
      },
      "AdminPurgePostId": {
        "type": "number",
        "format": "double"
      },
      "AdminPurgePost": {
        "properties": {
          "published": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          },
          "admin_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/AdminPurgePostId"
          }
        },
        "required": [
          "published",
          "community_id",
          "admin_person_id",
          "id"
        ],
        "type": "object",
        "description": "When an admin purges a post."
      },
      "AdminPurgePostView": {
        "properties": {
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "admin": {
            "$ref": "#/components/schemas/Person"
          },
          "admin_purge_post": {
            "$ref": "#/components/schemas/AdminPurgePost"
          }
        },
        "required": [
          "community",
          "admin_purge_post"
        ],
        "type": "object",
        "description": "When an admin purges a post."
      },
      "ModAddId": {
        "type": "number",
        "format": "double"
      },
      "ModAdd": {
        "properties": {
          "published": {
            "type": "string"
          },
          "removed": {
            "type": "boolean"
          },
          "other_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "mod_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/ModAddId"
          }
        },
        "required": [
          "published",
          "removed",
          "other_person_id",
          "mod_person_id",
          "id"
        ],
        "type": "object",
        "description": "When someone is added as a site moderator."
      },
      "ModAddView": {
        "properties": {
          "other_person": {
            "$ref": "#/components/schemas/Person"
          },
          "moderator": {
            "$ref": "#/components/schemas/Person"
          },
          "mod_add": {
            "$ref": "#/components/schemas/ModAdd"
          }
        },
        "required": [
          "other_person",
          "mod_add"
        ],
        "type": "object",
        "description": "When someone is added as a site moderator."
      },
      "ModAddCommunityId": {
        "type": "number",
        "format": "double"
      },
      "ModAddCommunity": {
        "properties": {
          "published": {
            "type": "string"
          },
          "removed": {
            "type": "boolean"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          },
          "other_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "mod_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/ModAddCommunityId"
          }
        },
        "required": [
          "published",
          "removed",
          "community_id",
          "other_person_id",
          "mod_person_id",
          "id"
        ],
        "type": "object",
        "description": "When someone is added as a community moderator."
      },
      "ModAddCommunityView": {
        "properties": {
          "other_person": {
            "$ref": "#/components/schemas/Person"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "moderator": {
            "$ref": "#/components/schemas/Person"
          },
          "mod_add_community": {
            "$ref": "#/components/schemas/ModAddCommunity"
          }
        },
        "required": [
          "other_person",
          "community",
          "mod_add_community"
        ],
        "type": "object",
        "description": "When someone is added as a community moderator."
      },
      "ModBanId": {
        "type": "number",
        "format": "double"
      },
      "ModBan": {
        "properties": {
          "published": {
            "type": "string"
          },
          "expires": {
            "type": "string"
          },
          "banned": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "other_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "mod_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/ModBanId"
          }
        },
        "required": [
          "published",
          "banned",
          "other_person_id",
          "mod_person_id",
          "id"
        ],
        "type": "object",
        "description": "When someone is banned from the site."
      },
      "ModBanView": {
        "properties": {
          "other_person": {
            "$ref": "#/components/schemas/Person"
          },
          "moderator": {
            "$ref": "#/components/schemas/Person"
          },
          "mod_ban": {
            "$ref": "#/components/schemas/ModBan"
          }
        },
        "required": [
          "other_person",
          "mod_ban"
        ],
        "type": "object",
        "description": "When someone is banned from the site."
      },
      "ModBanFromCommunityId": {
        "type": "number",
        "format": "double"
      },
      "ModBanFromCommunity": {
        "properties": {
          "published": {
            "type": "string"
          },
          "expires": {
            "type": "string"
          },
          "banned": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          },
          "other_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "mod_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/ModBanFromCommunityId"
          }
        },
        "required": [
          "published",
          "banned",
          "community_id",
          "other_person_id",
          "mod_person_id",
          "id"
        ],
        "type": "object",
        "description": "When someone is banned from a community."
      },
      "ModBanFromCommunityView": {
        "properties": {
          "other_person": {
            "$ref": "#/components/schemas/Person"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "moderator": {
            "$ref": "#/components/schemas/Person"
          },
          "mod_ban_from_community": {
            "$ref": "#/components/schemas/ModBanFromCommunity"
          }
        },
        "required": [
          "other_person",
          "community",
          "mod_ban_from_community"
        ],
        "type": "object",
        "description": "When someone is banned from a community."
      },
      "ModFeaturePostId": {
        "type": "number",
        "format": "double"
      },
      "ModFeaturePost": {
        "properties": {
          "is_featured_community": {
            "type": "boolean"
          },
          "published": {
            "type": "string"
          },
          "featured": {
            "type": "boolean"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          },
          "mod_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/ModFeaturePostId"
          }
        },
        "required": [
          "is_featured_community",
          "published",
          "featured",
          "post_id",
          "mod_person_id",
          "id"
        ],
        "type": "object",
        "description": "When a moderator features a post on a community (pins it to the top)."
      },
      "ModFeaturePostView": {
        "properties": {
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          },
          "other_person": {
            "$ref": "#/components/schemas/Person"
          },
          "moderator": {
            "$ref": "#/components/schemas/Person"
          },
          "mod_feature_post": {
            "$ref": "#/components/schemas/ModFeaturePost"
          }
        },
        "required": [
          "community",
          "post",
          "other_person",
          "mod_feature_post"
        ],
        "type": "object",
        "description": "When a moderator features a post on a community (pins it to the top)."
      },
      "ModHideCommunityId": {
        "type": "number",
        "format": "double"
      },
      "ModHideCommunity": {
        "properties": {
          "hidden": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "mod_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          },
          "id": {
            "$ref": "#/components/schemas/ModHideCommunityId"
          }
        },
        "required": [
          "hidden",
          "published",
          "mod_person_id",
          "community_id",
          "id"
        ],
        "type": "object",
        "description": "When a community is hidden from public view."
      },
      "ModHideCommunityView": {
        "properties": {
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "admin": {
            "$ref": "#/components/schemas/Person"
          },
          "mod_hide_community": {
            "$ref": "#/components/schemas/ModHideCommunity"
          }
        },
        "required": [
          "community",
          "mod_hide_community"
        ],
        "type": "object",
        "description": "When a community is hidden from public view."
      },
      "ModLockPostId": {
        "type": "number",
        "format": "double"
      },
      "ModLockPost": {
        "properties": {
          "published": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          },
          "mod_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/ModLockPostId"
          }
        },
        "required": [
          "published",
          "locked",
          "post_id",
          "mod_person_id",
          "id"
        ],
        "type": "object",
        "description": "When a moderator locks a post (prevents new comments being made)."
      },
      "ModLockPostView": {
        "properties": {
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          },
          "other_person": {
            "$ref": "#/components/schemas/Person"
          },
          "moderator": {
            "$ref": "#/components/schemas/Person"
          },
          "mod_lock_post": {
            "$ref": "#/components/schemas/ModLockPost"
          }
        },
        "required": [
          "community",
          "post",
          "other_person",
          "mod_lock_post"
        ],
        "type": "object",
        "description": "When a moderator locks a post (prevents new comments being made)."
      },
      "ModRemoveCommentId": {
        "type": "number",
        "format": "double"
      },
      "CommentId": {
        "type": "number",
        "format": "double",
        "description": "The comment id."
      },
      "ModRemoveComment": {
        "properties": {
          "published": {
            "type": "string"
          },
          "removed": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          },
          "mod_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/ModRemoveCommentId"
          }
        },
        "required": [
          "published",
          "removed",
          "comment_id",
          "mod_person_id",
          "id"
        ],
        "type": "object",
        "description": "When a moderator removes a comment."
      },
      "Comment": {
        "properties": {
          "language_id": {
            "$ref": "#/components/schemas/LanguageId"
          },
          "distinguished": {
            "type": "boolean",
            "description": "Whether the comment has been distinguished(speaking officially) by a mod."
          },
          "path": {
            "type": "string",
            "description": "The path / tree location of a comment, separated by dots, ending with the comment's id. Ex:\n0.24.27"
          },
          "local": {
            "type": "boolean",
            "description": "Whether the comment is local."
          },
          "ap_id": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "The federated activity id / ap_id."
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the comment has been deleted by its creator."
          },
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "removed": {
            "type": "boolean",
            "description": "Whether the comment has been removed."
          },
          "content": {
            "type": "string"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          },
          "creator_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/CommentId"
          }
        },
        "required": [
          "language_id",
          "distinguished",
          "path",
          "local",
          "ap_id",
          "deleted",
          "published",
          "removed",
          "content",
          "post_id",
          "creator_id",
          "id"
        ],
        "type": "object",
        "description": "A comment."
      },
      "ModRemoveCommentView": {
        "properties": {
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          },
          "comment": {
            "$ref": "#/components/schemas/Comment"
          },
          "other_person": {
            "$ref": "#/components/schemas/Person"
          },
          "moderator": {
            "$ref": "#/components/schemas/Person"
          },
          "mod_remove_comment": {
            "$ref": "#/components/schemas/ModRemoveComment"
          }
        },
        "required": [
          "community",
          "post",
          "comment",
          "other_person",
          "mod_remove_comment"
        ],
        "type": "object",
        "description": "When a moderator removes a comment."
      },
      "ModRemoveCommunityId": {
        "type": "number",
        "format": "double"
      },
      "ModRemoveCommunity": {
        "properties": {
          "published": {
            "type": "string"
          },
          "removed": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          },
          "mod_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/ModRemoveCommunityId"
          }
        },
        "required": [
          "published",
          "removed",
          "community_id",
          "mod_person_id",
          "id"
        ],
        "type": "object",
        "description": "When a moderator removes a community."
      },
      "ModRemoveCommunityView": {
        "properties": {
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "moderator": {
            "$ref": "#/components/schemas/Person"
          },
          "mod_remove_community": {
            "$ref": "#/components/schemas/ModRemoveCommunity"
          }
        },
        "required": [
          "community",
          "mod_remove_community"
        ],
        "type": "object",
        "description": "When a moderator removes a community."
      },
      "ModRemovePostId": {
        "type": "number",
        "format": "double"
      },
      "ModRemovePost": {
        "properties": {
          "published": {
            "type": "string"
          },
          "removed": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          },
          "mod_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/ModRemovePostId"
          }
        },
        "required": [
          "published",
          "removed",
          "post_id",
          "mod_person_id",
          "id"
        ],
        "type": "object",
        "description": "When a moderator removes a post."
      },
      "ModRemovePostView": {
        "properties": {
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          },
          "other_person": {
            "$ref": "#/components/schemas/Person"
          },
          "moderator": {
            "$ref": "#/components/schemas/Person"
          },
          "mod_remove_post": {
            "$ref": "#/components/schemas/ModRemovePost"
          }
        },
        "required": [
          "community",
          "post",
          "other_person",
          "mod_remove_post"
        ],
        "type": "object",
        "description": "When a moderator removes a post."
      },
      "ModTransferCommunityId": {
        "type": "number",
        "format": "double"
      },
      "ModTransferCommunity": {
        "properties": {
          "published": {
            "type": "string"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          },
          "other_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "mod_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/ModTransferCommunityId"
          }
        },
        "required": [
          "published",
          "community_id",
          "other_person_id",
          "mod_person_id",
          "id"
        ],
        "type": "object",
        "description": "When a moderator transfers a community to a new owner."
      },
      "ModTransferCommunityView": {
        "properties": {
          "other_person": {
            "$ref": "#/components/schemas/Person"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "moderator": {
            "$ref": "#/components/schemas/Person"
          },
          "mod_transfer_community": {
            "$ref": "#/components/schemas/ModTransferCommunity"
          }
        },
        "required": [
          "other_person",
          "community",
          "mod_transfer_community"
        ],
        "type": "object",
        "description": "When a moderator transfers a community to a new owner."
      },
      "ModlogCombinedView": {
        "anyOf": [
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "AdminAllowInstance"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AdminAllowInstanceView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "AdminBlockInstance"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AdminBlockInstanceView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "AdminPurgeComment"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AdminPurgeCommentView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "AdminPurgeCommunity"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AdminPurgeCommunityView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "AdminPurgePerson"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AdminPurgePersonView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "AdminPurgePost"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AdminPurgePostView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "ModAdd"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ModAddView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "ModAddCommunity"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ModAddCommunityView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "ModBan"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ModBanView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "ModBanFromCommunity"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ModBanFromCommunityView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "ModFeaturePost"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ModFeaturePostView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "ModHideCommunity"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ModHideCommunityView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "ModLockPost"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ModLockPostView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "ModRemoveComment"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ModRemoveCommentView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "ModRemoveCommunity"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ModRemoveCommunityView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "ModRemovePost"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ModRemovePostView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "ModTransferCommunity"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ModTransferCommunityView"
              }
            ]
          }
        ]
      },
      "GetModlogResponse": {
        "properties": {
          "modlog": {
            "items": {
              "$ref": "#/components/schemas/ModlogCombinedView"
            },
            "type": "array"
          }
        },
        "required": [
          "modlog"
        ],
        "type": "object",
        "description": "The modlog fetch response."
      },
      "ModlogActionType": {
        "type": "string",
        "enum": [
          "All",
          "ModRemovePost",
          "ModLockPost",
          "ModFeaturePost",
          "ModRemoveComment",
          "ModRemoveCommunity",
          "ModBanFromCommunity",
          "ModAddCommunity",
          "ModTransferCommunity",
          "ModAdd",
          "ModBan",
          "ModHideCommunity",
          "AdminPurgePerson",
          "AdminPurgeCommunity",
          "AdminPurgePost",
          "AdminPurgeComment",
          "AdminBlockInstance",
          "AdminAllowInstance"
        ],
        "description": "A list of possible types for the various modlog actions."
      },
      "ModlogCombinedPaginationCursor": {
        "type": "string",
        "description": "like PaginationCursor but for the modlog_combined"
      },
      "GetModlogI": {
        "properties": {
          "page_back": {
            "type": "boolean"
          },
          "page_cursor": {
            "$ref": "#/components/schemas/ModlogCombinedPaginationCursor"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          },
          "other_person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "type_": {
            "$ref": "#/components/schemas/ModlogActionType"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          },
          "mod_person_id": {
            "$ref": "#/components/schemas/PersonId"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "ImageDetails": {
        "properties": {
          "content_type": {
            "type": "string"
          },
          "height": {
            "type": "number",
            "format": "double"
          },
          "width": {
            "type": "number",
            "format": "double"
          },
          "link": {
            "$ref": "#/components/schemas/DbUrl"
          }
        },
        "required": [
          "content_type",
          "height",
          "width",
          "link"
        ],
        "type": "object"
      },
      "PostAggregates": {
        "properties": {
          "unresolved_report_count": {
            "type": "number",
            "format": "double"
          },
          "report_count": {
            "type": "number",
            "format": "double"
          },
          "newest_comment_time": {
            "type": "string",
            "description": "The time of the newest comment in the post."
          },
          "published": {
            "type": "string"
          },
          "downvotes": {
            "type": "number",
            "format": "double"
          },
          "upvotes": {
            "type": "number",
            "format": "double"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "comments": {
            "type": "number",
            "format": "double"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "unresolved_report_count",
          "report_count",
          "newest_comment_time",
          "published",
          "downvotes",
          "upvotes",
          "score",
          "comments",
          "post_id"
        ],
        "type": "object",
        "description": "Aggregate data for a post."
      },
      "SubscribedType": {
        "type": "string",
        "enum": [
          "Subscribed",
          "NotSubscribed",
          "Pending",
          "ApprovalRequired"
        ],
        "description": "A type / status for a community subscribe."
      },
      "TagId": {
        "type": "number",
        "format": "double",
        "description": "The internal tag id."
      },
      "Tag": {
        "properties": {
          "deleted": {
            "type": "boolean"
          },
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId",
            "description": "the community that owns this tag"
          },
          "name": {
            "type": "string"
          },
          "ap_id": {
            "$ref": "#/components/schemas/DbUrl"
          },
          "id": {
            "$ref": "#/components/schemas/TagId"
          }
        },
        "required": [
          "deleted",
          "published",
          "community_id",
          "name",
          "ap_id",
          "id"
        ],
        "type": "object",
        "description": "A tag that can be assigned to a post within a community.\nThe tag object is created by the community moderators.\nThe assignment happens by the post creator and can be updated by the community moderators.\n\nA tag is a federatable object that gives additional context to another object, which can be\ndisplayed and filtered on currently, we only have community post tags, which is a tag that is\ncreated by post authors as well as mods  of a community, to categorize a post. in the future we\nmay add more tag types, depending on the requirements, this will lead to either expansion of\nthis table (community_id optional, addition of tag_type enum) or split of this table / creation\nof new tables."
      },
      "PostTags": {
        "properties": {
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": "array"
          }
        },
        "required": [
          "tags"
        ],
        "type": "object",
        "description": "we wrap this in a struct so we can implement FromSqlRow<Json> for it"
      },
      "PostView": {
        "properties": {
          "tags": {
            "$ref": "#/components/schemas/PostTags"
          },
          "unread_comments": {
            "type": "number",
            "format": "double"
          },
          "my_vote": {
            "type": "number",
            "format": "double"
          },
          "creator_blocked": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "read": {
            "type": "boolean"
          },
          "saved": {
            "type": "boolean"
          },
          "subscribed": {
            "$ref": "#/components/schemas/SubscribedType"
          },
          "counts": {
            "$ref": "#/components/schemas/PostAggregates"
          },
          "creator_is_admin": {
            "type": "boolean"
          },
          "creator_is_moderator": {
            "type": "boolean"
          },
          "banned_from_community": {
            "type": "boolean"
          },
          "creator_banned_from_community": {
            "type": "boolean"
          },
          "image_details": {
            "$ref": "#/components/schemas/ImageDetails"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          }
        },
        "required": [
          "tags",
          "unread_comments",
          "creator_blocked",
          "hidden",
          "read",
          "saved",
          "subscribed",
          "counts",
          "creator_is_admin",
          "creator_is_moderator",
          "banned_from_community",
          "creator_banned_from_community",
          "community",
          "creator",
          "post"
        ],
        "type": "object",
        "description": "A post view."
      },
      "CommentAggregates": {
        "properties": {
          "unresolved_report_count": {
            "type": "number",
            "format": "double"
          },
          "report_count": {
            "type": "number",
            "format": "double"
          },
          "child_count": {
            "type": "number",
            "format": "double",
            "description": "The total number of children in this comment branch."
          },
          "published": {
            "type": "string"
          },
          "downvotes": {
            "type": "number",
            "format": "double"
          },
          "upvotes": {
            "type": "number",
            "format": "double"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          }
        },
        "required": [
          "unresolved_report_count",
          "report_count",
          "child_count",
          "published",
          "downvotes",
          "upvotes",
          "score",
          "comment_id"
        ],
        "type": "object",
        "description": "Aggregate data for a comment."
      },
      "CommentView": {
        "properties": {
          "my_vote": {
            "type": "number",
            "format": "double"
          },
          "creator_blocked": {
            "type": "boolean"
          },
          "saved": {
            "type": "boolean"
          },
          "subscribed": {
            "$ref": "#/components/schemas/SubscribedType"
          },
          "creator_is_admin": {
            "type": "boolean"
          },
          "creator_is_moderator": {
            "type": "boolean"
          },
          "banned_from_community": {
            "type": "boolean"
          },
          "creator_banned_from_community": {
            "type": "boolean"
          },
          "counts": {
            "$ref": "#/components/schemas/CommentAggregates"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "comment": {
            "$ref": "#/components/schemas/Comment"
          }
        },
        "required": [
          "creator_blocked",
          "saved",
          "subscribed",
          "creator_is_admin",
          "creator_is_moderator",
          "banned_from_community",
          "creator_banned_from_community",
          "counts",
          "community",
          "post",
          "creator",
          "comment"
        ],
        "type": "object",
        "description": "A comment view."
      },
      "CommunityAggregates": {
        "properties": {
          "unresolved_report_count": {
            "type": "number",
            "format": "double"
          },
          "report_count": {
            "type": "number",
            "format": "double"
          },
          "subscribers_local": {
            "type": "number",
            "format": "double"
          },
          "users_active_half_year": {
            "type": "number",
            "format": "double",
            "description": "The number of users with any activity in the last year."
          },
          "users_active_month": {
            "type": "number",
            "format": "double",
            "description": "The number of users with any activity in the last month."
          },
          "users_active_week": {
            "type": "number",
            "format": "double",
            "description": "The number of users with any activity in the last week."
          },
          "users_active_day": {
            "type": "number",
            "format": "double",
            "description": "The number of users with any activity in the last day."
          },
          "published": {
            "type": "string"
          },
          "comments": {
            "type": "number",
            "format": "double"
          },
          "posts": {
            "type": "number",
            "format": "double"
          },
          "subscribers": {
            "type": "number",
            "format": "double"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "unresolved_report_count",
          "report_count",
          "subscribers_local",
          "users_active_half_year",
          "users_active_month",
          "users_active_week",
          "users_active_day",
          "published",
          "comments",
          "posts",
          "subscribers",
          "community_id"
        ],
        "type": "object",
        "description": "Aggregate data for a community."
      },
      "CommunityView": {
        "properties": {
          "banned_from_community": {
            "type": "boolean"
          },
          "counts": {
            "$ref": "#/components/schemas/CommunityAggregates"
          },
          "blocked": {
            "type": "boolean"
          },
          "subscribed": {
            "$ref": "#/components/schemas/SubscribedType"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          }
        },
        "required": [
          "banned_from_community",
          "counts",
          "blocked",
          "subscribed",
          "community"
        ],
        "type": "object",
        "description": "A community view."
      },
      "SearchCombinedView": {
        "anyOf": [
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "Post"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/PostView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "Comment"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CommentView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "Community"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CommunityView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "Person"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/PersonView"
              }
            ]
          }
        ]
      },
      "SearchResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/SearchCombinedView"
            },
            "type": "array"
          }
        },
        "required": [
          "results"
        ],
        "type": "object",
        "description": "The search response, containing lists of the return type possibilities"
      },
      "SearchType": {
        "type": "string",
        "enum": [
          "All",
          "Comments",
          "Posts",
          "Communities",
          "Users"
        ],
        "description": "The type of content returned from a search."
      },
      "SearchSortType": {
        "type": "string",
        "enum": [
          "New",
          "Top",
          "Old"
        ],
        "description": "The search sort types."
      },
      "SearchCombinedPaginationCursor": {
        "type": "string",
        "description": "like PaginationCursor but for the modlog_combined"
      },
      "SearchI": {
        "properties": {
          "page_back": {
            "type": "boolean"
          },
          "page_cursor": {
            "$ref": "#/components/schemas/SearchCombinedPaginationCursor"
          },
          "disliked_only": {
            "type": "boolean"
          },
          "liked_only": {
            "type": "boolean"
          },
          "post_url_only": {
            "type": "boolean"
          },
          "title_only": {
            "type": "boolean"
          },
          "listing_type": {
            "$ref": "#/components/schemas/ListingType"
          },
          "sort": {
            "$ref": "#/components/schemas/SearchSortType"
          },
          "type_": {
            "$ref": "#/components/schemas/SearchType"
          },
          "creator_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "community_name": {
            "type": "string"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          },
          "search_term": {
            "type": "string"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "ResolveObjectResponse": {
        "properties": {
          "person": {
            "$ref": "#/components/schemas/PersonView"
          },
          "community": {
            "$ref": "#/components/schemas/CommunityView"
          },
          "post": {
            "$ref": "#/components/schemas/PostView"
          },
          "comment": {
            "$ref": "#/components/schemas/CommentView"
          }
        },
        "type": "object",
        "description": "The response of an apub object fetch."
      },
      "ResolveObjectI": {
        "properties": {
          "q": {
            "type": "string",
            "description": "Can be the full url, or a shortened version like: !fediverse@lemmy.ml"
          }
        },
        "required": [
          "q"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CommunityResponse": {
        "properties": {
          "discussion_languages": {
            "items": {
              "$ref": "#/components/schemas/LanguageId"
            },
            "type": "array"
          },
          "community_view": {
            "$ref": "#/components/schemas/CommunityView"
          }
        },
        "required": [
          "discussion_languages",
          "community_view"
        ],
        "type": "object",
        "description": "A simple community response."
      },
      "CreateCommunity": {
        "properties": {
          "visibility": {
            "$ref": "#/components/schemas/CommunityVisibility"
          },
          "discussion_languages": {
            "items": {
              "$ref": "#/components/schemas/LanguageId"
            },
            "type": "array"
          },
          "posting_restricted_to_mods": {
            "type": "boolean",
            "description": "Whether to restrict posting only to moderators."
          },
          "nsfw": {
            "type": "boolean",
            "description": "Whether its an NSFW community."
          },
          "banner": {
            "type": "string",
            "description": "A banner URL."
          },
          "icon": {
            "type": "string",
            "description": "An icon URL."
          },
          "description": {
            "type": "string",
            "description": "A shorter, one line description of your community."
          },
          "sidebar": {
            "type": "string",
            "description": "A sidebar for the community in markdown."
          },
          "title": {
            "type": "string",
            "description": "A longer title."
          },
          "name": {
            "type": "string",
            "description": "The unique name."
          }
        },
        "required": [
          "title",
          "name"
        ],
        "type": "object",
        "description": "Create a community."
      },
      "GetCommunityResponse": {
        "properties": {
          "discussion_languages": {
            "items": {
              "$ref": "#/components/schemas/LanguageId"
            },
            "type": "array"
          },
          "moderators": {
            "items": {
              "$ref": "#/components/schemas/CommunityModeratorView"
            },
            "type": "array"
          },
          "site": {
            "$ref": "#/components/schemas/Site"
          },
          "community_view": {
            "$ref": "#/components/schemas/CommunityView"
          }
        },
        "required": [
          "discussion_languages",
          "moderators",
          "community_view"
        ],
        "type": "object",
        "description": "The community response."
      },
      "GetCommunityI": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Example: star_trek , or star_trek@xyz.tld"
          },
          "id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "EditCommunity": {
        "properties": {
          "visibility": {
            "$ref": "#/components/schemas/CommunityVisibility"
          },
          "discussion_languages": {
            "items": {
              "$ref": "#/components/schemas/LanguageId"
            },
            "type": "array"
          },
          "posting_restricted_to_mods": {
            "type": "boolean",
            "description": "Whether to restrict posting only to moderators."
          },
          "nsfw": {
            "type": "boolean",
            "description": "Whether its an NSFW community."
          },
          "description": {
            "type": "string",
            "description": "A shorter, one line description of your community."
          },
          "sidebar": {
            "type": "string",
            "description": "A sidebar for the community in markdown."
          },
          "title": {
            "type": "string",
            "description": "A longer title."
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "community_id"
        ],
        "type": "object",
        "description": "Edit a community."
      },
      "ListCommunitiesResponse": {
        "properties": {
          "communities": {
            "items": {
              "$ref": "#/components/schemas/CommunityView"
            },
            "type": "array"
          }
        },
        "required": [
          "communities"
        ],
        "type": "object",
        "description": "The response for listing communities."
      },
      "CommunitySortType": {
        "type": "string",
        "enum": [
          "Active",
          "Hot",
          "New",
          "Old",
          "TopDay",
          "TopWeek",
          "TopMonth",
          "TopYear",
          "TopAll",
          "MostComments",
          "NewComments",
          "TopHour",
          "TopSixHour",
          "TopTwelveHour",
          "TopThreeMonths",
          "TopSixMonths",
          "TopNineMonths",
          "Controversial",
          "Scaled",
          "NameAsc",
          "NameDesc"
        ],
        "description": "The community sort types. See here for descriptions: https://join-lemmy.org/docs/en/users/03-votes-and-ranking.html"
      },
      "ListCommunitiesI": {
        "properties": {
          "limit": {
            "type": "number",
            "format": "double"
          },
          "page": {
            "type": "number",
            "format": "double"
          },
          "show_nsfw": {
            "type": "boolean"
          },
          "sort": {
            "$ref": "#/components/schemas/CommunitySortType"
          },
          "type_": {
            "$ref": "#/components/schemas/ListingType"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "FollowCommunity": {
        "properties": {
          "follow": {
            "type": "boolean"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "follow",
          "community_id"
        ],
        "type": "object",
        "description": "Follow / subscribe to a community."
      },
      "GetCommunityPendingFollowsCountResponse": {
        "properties": {
          "count": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "count"
        ],
        "type": "object"
      },
      "GetCommunityPendingFollowsCountI": {
        "properties": {
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "community_id"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PendingFollow": {
        "properties": {
          "subscribed": {
            "$ref": "#/components/schemas/SubscribedType"
          },
          "is_new_instance": {
            "type": "boolean"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          }
        },
        "required": [
          "subscribed",
          "is_new_instance",
          "community",
          "person"
        ],
        "type": "object"
      },
      "ListCommunityPendingFollowsResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PendingFollow"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ListCommunityPendingFollowsI": {
        "properties": {
          "limit": {
            "type": "number",
            "format": "double"
          },
          "page": {
            "type": "number",
            "format": "double"
          },
          "all_communities": {
            "type": "boolean"
          },
          "pending_only": {
            "type": "boolean",
            "description": "Only shows the unapproved applications"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "ApproveCommunityPendingFollower": {
        "properties": {
          "approve": {
            "type": "boolean"
          },
          "follower_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "approve",
          "follower_id",
          "community_id"
        ],
        "type": "object"
      },
      "BlockCommunityResponse": {
        "properties": {
          "blocked": {
            "type": "boolean"
          },
          "community_view": {
            "$ref": "#/components/schemas/CommunityView"
          }
        },
        "required": [
          "blocked",
          "community_view"
        ],
        "type": "object",
        "description": "The block community response."
      },
      "BlockCommunity": {
        "properties": {
          "block": {
            "type": "boolean"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "block",
          "community_id"
        ],
        "type": "object",
        "description": "Block a community."
      },
      "DeleteCommunity": {
        "properties": {
          "deleted": {
            "type": "boolean"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "deleted",
          "community_id"
        ],
        "type": "object",
        "description": "Delete your own community."
      },
      "HideCommunity": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "hidden",
          "community_id"
        ],
        "type": "object",
        "description": "Hide a community from the main view."
      },
      "RemoveCommunity": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "removed": {
            "type": "boolean"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "removed",
          "community_id"
        ],
        "type": "object",
        "description": "Remove a community (only doable by moderators)."
      },
      "TransferCommunity": {
        "properties": {
          "person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "person_id",
          "community_id"
        ],
        "type": "object",
        "description": "Transfer a community to a new owner."
      },
      "BanFromCommunityResponse": {
        "properties": {
          "banned": {
            "type": "boolean"
          },
          "person_view": {
            "$ref": "#/components/schemas/PersonView"
          }
        },
        "required": [
          "banned",
          "person_view"
        ],
        "type": "object",
        "description": "The response for banning a user from a community."
      },
      "BanFromCommunity": {
        "properties": {
          "expires": {
            "type": "number",
            "format": "double",
            "description": "A time that the ban will expire, in unix epoch seconds.\n\nAn i64 unix timestamp is used for a simpler API client implementation."
          },
          "reason": {
            "type": "string"
          },
          "remove_or_restore_data": {
            "type": "boolean",
            "description": "Optionally remove or restore all their data. Useful for new troll accounts.\nIf ban is true, then this means remove. If ban is false, it means restore."
          },
          "ban": {
            "type": "boolean"
          },
          "person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "ban",
          "person_id",
          "community_id"
        ],
        "type": "object",
        "description": "Ban a user from a community."
      },
      "AddModToCommunityResponse": {
        "properties": {
          "moderators": {
            "items": {
              "$ref": "#/components/schemas/CommunityModeratorView"
            },
            "type": "array"
          }
        },
        "required": [
          "moderators"
        ],
        "type": "object",
        "description": "The response of adding a moderator to a community."
      },
      "AddModToCommunity": {
        "properties": {
          "added": {
            "type": "boolean"
          },
          "person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "added",
          "person_id",
          "community_id"
        ],
        "type": "object",
        "description": "Add a moderator to a community."
      },
      "GetRandomCommunityI": {
        "properties": {
          "show_nsfw": {
            "type": "boolean"
          },
          "type_": {
            "$ref": "#/components/schemas/ListingType"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PostResponse": {
        "properties": {
          "post_view": {
            "$ref": "#/components/schemas/PostView"
          }
        },
        "required": [
          "post_view"
        ],
        "type": "object"
      },
      "CreatePost": {
        "properties": {
          "scheduled_publish_time": {
            "type": "number",
            "format": "double",
            "description": "Time when this post should be scheduled. Null means publish immediately."
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagId"
            },
            "type": "array"
          },
          "custom_thumbnail": {
            "type": "string",
            "description": "Instead of fetching a thumbnail, use a custom one."
          },
          "language_id": {
            "$ref": "#/components/schemas/LanguageId"
          },
          "nsfw": {
            "type": "boolean"
          },
          "honeypot": {
            "type": "string",
            "description": "A honeypot to catch bots. Should be None."
          },
          "alt_text": {
            "type": "string",
            "description": "An optional alt_text, usable for image posts."
          },
          "body": {
            "type": "string",
            "description": "An optional body for the post in markdown."
          },
          "url": {
            "type": "string"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "community_id",
          "name"
        ],
        "type": "object",
        "description": "Create a post."
      },
      "GetPostResponse": {
        "properties": {
          "cross_posts": {
            "items": {
              "$ref": "#/components/schemas/PostView"
            },
            "type": "array",
            "description": "A list of cross-posts, or other times / communities this link has been posted to."
          },
          "moderators": {
            "items": {
              "$ref": "#/components/schemas/CommunityModeratorView"
            },
            "type": "array"
          },
          "community_view": {
            "$ref": "#/components/schemas/CommunityView"
          },
          "post_view": {
            "$ref": "#/components/schemas/PostView"
          }
        },
        "required": [
          "cross_posts",
          "moderators",
          "community_view",
          "post_view"
        ],
        "type": "object",
        "description": "The post response."
      },
      "GetPostI": {
        "properties": {
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          },
          "id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "EditPost": {
        "properties": {
          "scheduled_publish_time": {
            "type": "number",
            "format": "double",
            "description": "Time when this post should be scheduled. Null means publish immediately."
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagId"
            },
            "type": "array"
          },
          "custom_thumbnail": {
            "type": "string",
            "description": "Instead of fetching a thumbnail, use a custom one."
          },
          "language_id": {
            "$ref": "#/components/schemas/LanguageId"
          },
          "nsfw": {
            "type": "boolean"
          },
          "alt_text": {
            "type": "string",
            "description": "An optional alt_text, usable for image posts."
          },
          "body": {
            "type": "string",
            "description": "An optional body for the post in markdown."
          },
          "url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "post_id"
        ],
        "type": "object",
        "description": "Edit a post."
      },
      "DeletePost": {
        "properties": {
          "deleted": {
            "type": "boolean"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "deleted",
          "post_id"
        ],
        "type": "object",
        "description": "Delete a post."
      },
      "RemovePost": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "removed": {
            "type": "boolean"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "removed",
          "post_id"
        ],
        "type": "object",
        "description": "Remove a post (only doable by mods)."
      },
      "MarkPostAsRead": {
        "properties": {
          "read": {
            "type": "boolean"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "read",
          "post_id"
        ],
        "type": "object",
        "description": "Mark a post as read."
      },
      "MarkManyPostsAsRead": {
        "properties": {
          "post_ids": {
            "items": {
              "$ref": "#/components/schemas/PostId"
            },
            "type": "array"
          }
        },
        "required": [
          "post_ids"
        ],
        "type": "object",
        "description": "Mark several posts as read."
      },
      "HidePost": {
        "properties": {
          "hide": {
            "type": "boolean"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "hide",
          "post_id"
        ],
        "type": "object",
        "description": "Hide a post from list views"
      },
      "LockPost": {
        "properties": {
          "locked": {
            "type": "boolean"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "locked",
          "post_id"
        ],
        "type": "object",
        "description": "Lock a post (prevent new comments)."
      },
      "PostFeatureType": {
        "type": "string",
        "enum": [
          "Local",
          "Community"
        ],
        "description": "The feature type for a post."
      },
      "FeaturePost": {
        "properties": {
          "feature_type": {
            "$ref": "#/components/schemas/PostFeatureType"
          },
          "featured": {
            "type": "boolean"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "feature_type",
          "featured",
          "post_id"
        ],
        "type": "object",
        "description": "Feature a post (stickies / pins to the top)."
      },
      "PaginationCursor": {
        "type": "string",
        "description": "currently this is just a wrapper around post id, but should be seen as opaque from the client's\nperspective. stringified since we might want to use arbitrary info later, with a P prepended to\nprevent ossification (api users love to make assumptions (e.g. parse stuff that looks like\nnumbers as numbers) about apis that aren't part of the spec"
      },
      "GetPostsResponse": {
        "properties": {
          "next_page": {
            "$ref": "#/components/schemas/PaginationCursor",
            "description": "the pagination cursor to use to fetch the next page"
          },
          "posts": {
            "items": {
              "$ref": "#/components/schemas/PostView"
            },
            "type": "array"
          }
        },
        "required": [
          "posts"
        ],
        "type": "object",
        "description": "The post list response."
      },
      "GetPostsI": {
        "properties": {
          "page_back": {
            "type": "boolean"
          },
          "page_cursor": {
            "$ref": "#/components/schemas/PaginationCursor"
          },
          "no_comments_only": {
            "type": "boolean",
            "description": "If true, then only show posts with no comments"
          },
          "mark_as_read": {
            "type": "boolean",
            "description": "Whether to automatically mark fetched posts as read."
          },
          "hide_media": {
            "type": "boolean",
            "description": "If false, then show posts with media attached (even if your user setting is to hide them)"
          },
          "show_nsfw": {
            "type": "boolean",
            "description": "If true, then show the nsfw posts (even if your user setting is to hide them)"
          },
          "show_read": {
            "type": "boolean",
            "description": "If true, then show the read posts (even if your user setting is to hide them)"
          },
          "show_hidden": {
            "type": "boolean"
          },
          "disliked_only": {
            "type": "boolean"
          },
          "liked_only": {
            "type": "boolean"
          },
          "read_only": {
            "type": "boolean"
          },
          "saved_only": {
            "type": "boolean"
          },
          "community_name": {
            "type": "string"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          },
          "limit": {
            "type": "number",
            "format": "double"
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": "DEPRECATED, use page_cursor"
          },
          "sort": {
            "$ref": "#/components/schemas/PostSortType"
          },
          "type_": {
            "$ref": "#/components/schemas/ListingType"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CreatePostLike": {
        "properties": {
          "score": {
            "type": "number",
            "format": "double",
            "description": "Score must be -1, 0, or 1."
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "score",
          "post_id"
        ],
        "type": "object",
        "description": "Like a post."
      },
      "VoteView": {
        "properties": {
          "score": {
            "type": "number",
            "format": "double"
          },
          "creator_banned_from_community": {
            "type": "boolean"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          }
        },
        "required": [
          "score",
          "creator_banned_from_community",
          "creator"
        ],
        "type": "object",
        "description": "A vote view for checking a post or comments votes."
      },
      "ListPostLikesResponse": {
        "properties": {
          "post_likes": {
            "items": {
              "$ref": "#/components/schemas/VoteView"
            },
            "type": "array"
          }
        },
        "required": [
          "post_likes"
        ],
        "type": "object",
        "description": "The post likes response"
      },
      "ListPostLikesI": {
        "properties": {
          "limit": {
            "type": "number",
            "format": "double"
          },
          "page": {
            "type": "number",
            "format": "double"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "post_id"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SavePost": {
        "properties": {
          "save": {
            "type": "boolean"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "save",
          "post_id"
        ],
        "type": "object",
        "description": "Save / bookmark a post."
      },
      "PostReportId": {
        "type": "number",
        "format": "double",
        "description": "The post report id."
      },
      "PostReport": {
        "properties": {
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "resolver_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "resolved": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "original_post_body": {
            "type": "string",
            "description": "The original post body."
          },
          "original_post_url": {
            "$ref": "#/components/schemas/DbUrl",
            "description": "The original post url."
          },
          "original_post_name": {
            "type": "string",
            "description": "The original post title."
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          },
          "creator_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/PostReportId"
          }
        },
        "required": [
          "published",
          "resolved",
          "reason",
          "original_post_name",
          "post_id",
          "creator_id",
          "id"
        ],
        "type": "object",
        "description": "A post report."
      },
      "PostReportView": {
        "properties": {
          "resolver": {
            "$ref": "#/components/schemas/Person"
          },
          "counts": {
            "$ref": "#/components/schemas/PostAggregates"
          },
          "unread_comments": {
            "type": "number",
            "format": "double"
          },
          "my_vote": {
            "type": "number",
            "format": "double"
          },
          "creator_blocked": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "read": {
            "type": "boolean"
          },
          "saved": {
            "type": "boolean"
          },
          "subscribed": {
            "$ref": "#/components/schemas/SubscribedType"
          },
          "creator_is_admin": {
            "type": "boolean"
          },
          "creator_is_moderator": {
            "type": "boolean"
          },
          "creator_banned_from_community": {
            "type": "boolean"
          },
          "post_creator": {
            "$ref": "#/components/schemas/Person"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          },
          "post_report": {
            "$ref": "#/components/schemas/PostReport"
          }
        },
        "required": [
          "counts",
          "unread_comments",
          "creator_blocked",
          "hidden",
          "read",
          "saved",
          "subscribed",
          "creator_is_admin",
          "creator_is_moderator",
          "creator_banned_from_community",
          "post_creator",
          "creator",
          "community",
          "post",
          "post_report"
        ],
        "type": "object",
        "description": "A post report view."
      },
      "PostReportResponse": {
        "properties": {
          "post_report_view": {
            "$ref": "#/components/schemas/PostReportView"
          }
        },
        "required": [
          "post_report_view"
        ],
        "type": "object",
        "description": "The post report response."
      },
      "CreatePostReport": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "reason",
          "post_id"
        ],
        "type": "object",
        "description": "Create a post report."
      },
      "ResolvePostReport": {
        "properties": {
          "resolved": {
            "type": "boolean"
          },
          "report_id": {
            "$ref": "#/components/schemas/PostReportId"
          }
        },
        "required": [
          "resolved",
          "report_id"
        ],
        "type": "object",
        "description": "Resolve a post report (mods only)."
      },
      "LinkMetadata": {
        "properties": {
          "embed_video_url": {
            "$ref": "#/components/schemas/DbUrl"
          },
          "image": {
            "$ref": "#/components/schemas/DbUrl"
          },
          "description": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "content_type": {
            "type": "string"
          }
        },
        "type": "object",
        "description": "Site metadata, from its opengraph tags."
      },
      "GetSiteMetadataResponse": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/LinkMetadata"
          }
        },
        "required": [
          "metadata"
        ],
        "type": "object",
        "description": "The site metadata response."
      },
      "GetSiteMetadataI": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CommentResponse": {
        "properties": {
          "recipient_ids": {
            "items": {
              "$ref": "#/components/schemas/LocalUserId"
            },
            "type": "array"
          },
          "comment_view": {
            "$ref": "#/components/schemas/CommentView"
          }
        },
        "required": [
          "recipient_ids",
          "comment_view"
        ],
        "type": "object",
        "description": "A comment response."
      },
      "CreateComment": {
        "properties": {
          "language_id": {
            "$ref": "#/components/schemas/LanguageId"
          },
          "parent_id": {
            "$ref": "#/components/schemas/CommentId"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "post_id",
          "content"
        ],
        "type": "object",
        "description": "Create a comment."
      },
      "EditComment": {
        "properties": {
          "language_id": {
            "$ref": "#/components/schemas/LanguageId"
          },
          "content": {
            "type": "string"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          }
        },
        "required": [
          "comment_id"
        ],
        "type": "object",
        "description": "Edit a comment."
      },
      "DeleteComment": {
        "properties": {
          "deleted": {
            "type": "boolean"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          }
        },
        "required": [
          "deleted",
          "comment_id"
        ],
        "type": "object",
        "description": "Delete your own comment."
      },
      "RemoveComment": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "removed": {
            "type": "boolean"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          }
        },
        "required": [
          "removed",
          "comment_id"
        ],
        "type": "object",
        "description": "Remove a comment (only doable by mods)."
      },
      "CommentReplyId": {
        "type": "number",
        "format": "double",
        "description": "The comment reply id."
      },
      "MarkCommentReplyAsRead": {
        "properties": {
          "read": {
            "type": "boolean"
          },
          "comment_reply_id": {
            "$ref": "#/components/schemas/CommentReplyId"
          }
        },
        "required": [
          "read",
          "comment_reply_id"
        ],
        "type": "object",
        "description": "Mark a comment reply as read."
      },
      "CreateCommentLike": {
        "properties": {
          "score": {
            "type": "number",
            "format": "double",
            "description": "Must be -1, 0, or 1 ."
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          }
        },
        "required": [
          "score",
          "comment_id"
        ],
        "type": "object",
        "description": "Like a comment."
      },
      "ListCommentLikesResponse": {
        "properties": {
          "comment_likes": {
            "items": {
              "$ref": "#/components/schemas/VoteView"
            },
            "type": "array"
          }
        },
        "required": [
          "comment_likes"
        ],
        "type": "object",
        "description": "The comment likes response"
      },
      "ListCommentLikesI": {
        "properties": {
          "limit": {
            "type": "number",
            "format": "double"
          },
          "page": {
            "type": "number",
            "format": "double"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          }
        },
        "required": [
          "comment_id"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SaveComment": {
        "properties": {
          "save": {
            "type": "boolean"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          }
        },
        "required": [
          "save",
          "comment_id"
        ],
        "type": "object",
        "description": "Save / bookmark a comment."
      },
      "DistinguishComment": {
        "properties": {
          "distinguished": {
            "type": "boolean"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          }
        },
        "required": [
          "distinguished",
          "comment_id"
        ],
        "type": "object",
        "description": "Distinguish a comment (IE speak as moderator)."
      },
      "GetCommentsResponse": {
        "properties": {
          "comments": {
            "items": {
              "$ref": "#/components/schemas/CommentView"
            },
            "type": "array"
          }
        },
        "required": [
          "comments"
        ],
        "type": "object",
        "description": "The comment list response."
      },
      "GetCommentsI": {
        "properties": {
          "disliked_only": {
            "type": "boolean"
          },
          "liked_only": {
            "type": "boolean"
          },
          "parent_id": {
            "$ref": "#/components/schemas/CommentId"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          },
          "community_name": {
            "type": "string"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          },
          "limit": {
            "type": "number",
            "format": "double"
          },
          "page": {
            "type": "number",
            "format": "double"
          },
          "max_depth": {
            "type": "number",
            "format": "double"
          },
          "sort": {
            "$ref": "#/components/schemas/CommentSortType"
          },
          "type_": {
            "$ref": "#/components/schemas/ListingType"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CommentSlimView": {
        "properties": {
          "my_vote": {
            "type": "number",
            "format": "double"
          },
          "creator_blocked": {
            "type": "boolean"
          },
          "saved": {
            "type": "boolean"
          },
          "subscribed": {
            "$ref": "#/components/schemas/SubscribedType"
          },
          "creator_is_admin": {
            "type": "boolean"
          },
          "creator_is_moderator": {
            "type": "boolean"
          },
          "banned_from_community": {
            "type": "boolean"
          },
          "creator_banned_from_community": {
            "type": "boolean"
          },
          "counts": {
            "$ref": "#/components/schemas/CommentAggregates"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "comment": {
            "$ref": "#/components/schemas/Comment"
          }
        },
        "required": [
          "creator_blocked",
          "saved",
          "subscribed",
          "creator_is_admin",
          "creator_is_moderator",
          "banned_from_community",
          "creator_banned_from_community",
          "counts",
          "creator",
          "comment"
        ],
        "type": "object",
        "description": "A slimmer comment view, without the post, or community."
      },
      "GetCommentsSlimResponse": {
        "properties": {
          "comments": {
            "items": {
              "$ref": "#/components/schemas/CommentSlimView"
            },
            "type": "array"
          }
        },
        "required": [
          "comments"
        ],
        "type": "object",
        "description": "A slimmer comment list response, without the post or community."
      },
      "GetCommentI": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CommentId"
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CommentReportId": {
        "type": "number",
        "format": "double",
        "description": "The comment report id."
      },
      "CommentReport": {
        "properties": {
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "resolver_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "resolved": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "original_comment_text": {
            "type": "string"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          },
          "creator_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/CommentReportId"
          }
        },
        "required": [
          "published",
          "resolved",
          "reason",
          "original_comment_text",
          "comment_id",
          "creator_id",
          "id"
        ],
        "type": "object",
        "description": "A comment report."
      },
      "CommentReportView": {
        "properties": {
          "resolver": {
            "$ref": "#/components/schemas/Person"
          },
          "my_vote": {
            "type": "number",
            "format": "double"
          },
          "saved": {
            "type": "boolean"
          },
          "subscribed": {
            "$ref": "#/components/schemas/SubscribedType"
          },
          "creator_blocked": {
            "type": "boolean"
          },
          "creator_is_admin": {
            "type": "boolean"
          },
          "creator_is_moderator": {
            "type": "boolean"
          },
          "creator_banned_from_community": {
            "type": "boolean"
          },
          "counts": {
            "$ref": "#/components/schemas/CommentAggregates"
          },
          "comment_creator": {
            "$ref": "#/components/schemas/Person"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          },
          "comment": {
            "$ref": "#/components/schemas/Comment"
          },
          "comment_report": {
            "$ref": "#/components/schemas/CommentReport"
          }
        },
        "required": [
          "saved",
          "subscribed",
          "creator_blocked",
          "creator_is_admin",
          "creator_is_moderator",
          "creator_banned_from_community",
          "counts",
          "comment_creator",
          "creator",
          "community",
          "post",
          "comment",
          "comment_report"
        ],
        "type": "object",
        "description": "A comment report view."
      },
      "CommentReportResponse": {
        "properties": {
          "comment_report_view": {
            "$ref": "#/components/schemas/CommentReportView"
          }
        },
        "required": [
          "comment_report_view"
        ],
        "type": "object",
        "description": "The comment report response."
      },
      "CreateCommentReport": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          }
        },
        "required": [
          "reason",
          "comment_id"
        ],
        "type": "object",
        "description": "Report a comment."
      },
      "ResolveCommentReport": {
        "properties": {
          "resolved": {
            "type": "boolean"
          },
          "report_id": {
            "$ref": "#/components/schemas/CommentReportId"
          }
        },
        "required": [
          "resolved",
          "report_id"
        ],
        "type": "object",
        "description": "Resolve a comment report (only doable by mods)."
      },
      "PrivateMessageId": {
        "type": "number",
        "format": "double",
        "description": "The private message id."
      },
      "PrivateMessage": {
        "properties": {
          "local": {
            "type": "boolean"
          },
          "ap_id": {
            "$ref": "#/components/schemas/DbUrl"
          },
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "deleted": {
            "type": "boolean"
          },
          "content": {
            "type": "string"
          },
          "recipient_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "creator_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/PrivateMessageId"
          }
        },
        "required": [
          "local",
          "ap_id",
          "published",
          "read",
          "deleted",
          "content",
          "recipient_id",
          "creator_id",
          "id"
        ],
        "type": "object",
        "description": "A private message."
      },
      "PrivateMessageView": {
        "properties": {
          "recipient": {
            "$ref": "#/components/schemas/Person"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "private_message": {
            "$ref": "#/components/schemas/PrivateMessage"
          }
        },
        "required": [
          "recipient",
          "creator",
          "private_message"
        ],
        "type": "object",
        "description": "A private message view."
      },
      "PrivateMessageResponse": {
        "properties": {
          "private_message_view": {
            "$ref": "#/components/schemas/PrivateMessageView"
          }
        },
        "required": [
          "private_message_view"
        ],
        "type": "object",
        "description": "A single private message response."
      },
      "CreatePrivateMessage": {
        "properties": {
          "recipient_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "recipient_id",
          "content"
        ],
        "type": "object",
        "description": "Create a private message."
      },
      "EditPrivateMessage": {
        "properties": {
          "content": {
            "type": "string"
          },
          "private_message_id": {
            "$ref": "#/components/schemas/PrivateMessageId"
          }
        },
        "required": [
          "content",
          "private_message_id"
        ],
        "type": "object",
        "description": "Edit a private message."
      },
      "DeletePrivateMessage": {
        "properties": {
          "deleted": {
            "type": "boolean"
          },
          "private_message_id": {
            "$ref": "#/components/schemas/PrivateMessageId"
          }
        },
        "required": [
          "deleted",
          "private_message_id"
        ],
        "type": "object",
        "description": "Delete a private message."
      },
      "MarkPrivateMessageAsRead": {
        "properties": {
          "read": {
            "type": "boolean"
          },
          "private_message_id": {
            "$ref": "#/components/schemas/PrivateMessageId"
          }
        },
        "required": [
          "read",
          "private_message_id"
        ],
        "type": "object",
        "description": "Mark a private message as read."
      },
      "PrivateMessageReportId": {
        "type": "number",
        "format": "double",
        "description": "The private message report id."
      },
      "PrivateMessageReport": {
        "properties": {
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "resolver_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "resolved": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "original_pm_text": {
            "type": "string",
            "description": "The original text."
          },
          "private_message_id": {
            "$ref": "#/components/schemas/PrivateMessageId"
          },
          "creator_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/PrivateMessageReportId"
          }
        },
        "required": [
          "published",
          "resolved",
          "reason",
          "original_pm_text",
          "private_message_id",
          "creator_id",
          "id"
        ],
        "type": "object",
        "description": "The private message report."
      },
      "PrivateMessageReportView": {
        "properties": {
          "resolver": {
            "$ref": "#/components/schemas/Person"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "private_message_creator": {
            "$ref": "#/components/schemas/Person"
          },
          "private_message": {
            "$ref": "#/components/schemas/PrivateMessage"
          },
          "private_message_report": {
            "$ref": "#/components/schemas/PrivateMessageReport"
          }
        },
        "required": [
          "creator",
          "private_message_creator",
          "private_message",
          "private_message_report"
        ],
        "type": "object",
        "description": "A private message report view."
      },
      "PrivateMessageReportResponse": {
        "properties": {
          "private_message_report_view": {
            "$ref": "#/components/schemas/PrivateMessageReportView"
          }
        },
        "required": [
          "private_message_report_view"
        ],
        "type": "object",
        "description": "A private message report response."
      },
      "CreatePrivateMessageReport": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "private_message_id": {
            "$ref": "#/components/schemas/PrivateMessageId"
          }
        },
        "required": [
          "reason",
          "private_message_id"
        ],
        "type": "object",
        "description": "Create a report for a private message."
      },
      "ResolvePrivateMessageReport": {
        "properties": {
          "resolved": {
            "type": "boolean"
          },
          "report_id": {
            "$ref": "#/components/schemas/PrivateMessageReportId"
          }
        },
        "required": [
          "resolved",
          "report_id"
        ],
        "type": "object",
        "description": "Resolve a private message report."
      },
      "LoginResponse": {
        "properties": {
          "verify_email_sent": {
            "type": "boolean",
            "description": "If email verifications are required, this will return true for a signup response."
          },
          "registration_created": {
            "type": "boolean",
            "description": "If registration applications are required, this will return true for a signup response."
          },
          "jwt": {
            "$ref": "#/components/schemas/SensitiveString",
            "description": "This is None in response to `Register` if email verification is enabled, or the server\nrequires registration applications."
          }
        },
        "required": [
          "verify_email_sent",
          "registration_created"
        ],
        "type": "object",
        "description": "A response for your login."
      },
      "Register": {
        "properties": {
          "answer": {
            "type": "string",
            "description": "An answer is mandatory if require application is enabled on the server"
          },
          "honeypot": {
            "type": "string",
            "description": "A form field to trick signup bots. Should be None."
          },
          "captcha_answer": {
            "type": "string",
            "description": "Your captcha answer."
          },
          "captcha_uuid": {
            "type": "string",
            "description": "The UUID of the captcha item."
          },
          "email": {
            "$ref": "#/components/schemas/SensitiveString",
            "description": "email is mandatory if email verification is enabled on the server"
          },
          "show_nsfw": {
            "type": "boolean"
          },
          "password_verify": {
            "$ref": "#/components/schemas/SensitiveString"
          },
          "password": {
            "$ref": "#/components/schemas/SensitiveString"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "password_verify",
          "password",
          "username"
        ],
        "type": "object",
        "description": "Register / Sign up to lemmy."
      },
      "Login": {
        "properties": {
          "totp_2fa_token": {
            "type": "string",
            "description": "May be required, if totp is enabled for their account."
          },
          "password": {
            "$ref": "#/components/schemas/SensitiveString"
          },
          "username_or_email": {
            "$ref": "#/components/schemas/SensitiveString"
          }
        },
        "required": [
          "password",
          "username_or_email"
        ],
        "type": "object",
        "description": "Logging into lemmy."
      },
      "GetPersonDetailsResponse": {
        "properties": {
          "moderates": {
            "items": {
              "$ref": "#/components/schemas/CommunityModeratorView"
            },
            "type": "array"
          },
          "site": {
            "$ref": "#/components/schemas/Site"
          },
          "person_view": {
            "$ref": "#/components/schemas/PersonView"
          }
        },
        "required": [
          "moderates",
          "person_view"
        ],
        "type": "object",
        "description": "A person's details response."
      },
      "GetPersonDetailsI": {
        "properties": {
          "username": {
            "type": "string",
            "description": "Example: dessalines , or dessalines@xyz.tld"
          },
          "person_id": {
            "$ref": "#/components/schemas/PersonId"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PersonContentCombinedView": {
        "anyOf": [
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "Post"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/PostView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "Comment"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CommentView"
              }
            ]
          }
        ]
      },
      "ListPersonContentResponse": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/PersonContentCombinedView"
            },
            "type": "array"
          }
        },
        "required": [
          "content"
        ],
        "type": "object",
        "description": "A person's content response."
      },
      "PersonContentType": {
        "type": "string",
        "enum": [
          "All",
          "Comments",
          "Posts"
        ],
        "description": "A list of possible types for a person's content."
      },
      "PersonContentCombinedPaginationCursor": {
        "type": "string",
        "description": "like PaginationCursor but for the person_content_combined table"
      },
      "ListPersonContentI": {
        "properties": {
          "page_back": {
            "type": "boolean"
          },
          "page_cursor": {
            "$ref": "#/components/schemas/PersonContentCombinedPaginationCursor"
          },
          "username": {
            "type": "string",
            "description": "Example: dessalines , or dessalines@xyz.tld"
          },
          "person_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "type_": {
            "$ref": "#/components/schemas/PersonContentType"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PersonCommentMentionId": {
        "type": "number",
        "format": "double",
        "description": "The person comment mention id."
      },
      "MarkPersonCommentMentionAsRead": {
        "properties": {
          "read": {
            "type": "boolean"
          },
          "person_comment_mention_id": {
            "$ref": "#/components/schemas/PersonCommentMentionId"
          }
        },
        "required": [
          "read",
          "person_comment_mention_id"
        ],
        "type": "object",
        "description": "Mark a person mention as read."
      },
      "PersonPostMentionId": {
        "type": "number",
        "format": "double",
        "description": "The person post mention id."
      },
      "MarkPersonPostMentionAsRead": {
        "properties": {
          "read": {
            "type": "boolean"
          },
          "person_post_mention_id": {
            "$ref": "#/components/schemas/PersonPostMentionId"
          }
        },
        "required": [
          "read",
          "person_post_mention_id"
        ],
        "type": "object",
        "description": "Mark a person mention as read."
      },
      "BanPersonResponse": {
        "properties": {
          "banned": {
            "type": "boolean"
          },
          "person_view": {
            "$ref": "#/components/schemas/PersonView"
          }
        },
        "required": [
          "banned",
          "person_view"
        ],
        "type": "object",
        "description": "A response for a banned person."
      },
      "BanPerson": {
        "properties": {
          "expires": {
            "type": "number",
            "format": "double",
            "description": "A time that the ban will expire, in unix epoch seconds.\n\nAn i64 unix timestamp is used for a simpler API client implementation."
          },
          "reason": {
            "type": "string"
          },
          "remove_or_restore_data": {
            "type": "boolean",
            "description": "Optionally remove or restore all their data. Useful for new troll accounts.\nIf ban is true, then this means remove. If ban is false, it means restore."
          },
          "ban": {
            "type": "boolean"
          },
          "person_id": {
            "$ref": "#/components/schemas/PersonId"
          }
        },
        "required": [
          "ban",
          "person_id"
        ],
        "type": "object",
        "description": "Ban a person from the site."
      },
      "BannedPersonsResponse": {
        "properties": {
          "banned": {
            "items": {
              "$ref": "#/components/schemas/PersonView"
            },
            "type": "array"
          }
        },
        "required": [
          "banned"
        ],
        "type": "object",
        "description": "The list of banned persons."
      },
      "BlockPersonResponse": {
        "properties": {
          "blocked": {
            "type": "boolean"
          },
          "person_view": {
            "$ref": "#/components/schemas/PersonView"
          }
        },
        "required": [
          "blocked",
          "person_view"
        ],
        "type": "object",
        "description": "The response for a person block."
      },
      "BlockPerson": {
        "properties": {
          "block": {
            "type": "boolean"
          },
          "person_id": {
            "$ref": "#/components/schemas/PersonId"
          }
        },
        "required": [
          "block",
          "person_id"
        ],
        "type": "object",
        "description": "Block a person."
      },
      "CaptchaResponse": {
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The UUID for the captcha item."
          },
          "wav": {
            "type": "string",
            "description": "A Base64 encoded wav audio"
          },
          "png": {
            "type": "string",
            "description": "A Base64 encoded png"
          }
        },
        "required": [
          "uuid",
          "wav",
          "png"
        ],
        "type": "object",
        "description": "A captcha response."
      },
      "GetCaptchaResponse": {
        "properties": {
          "ok": {
            "$ref": "#/components/schemas/CaptchaResponse",
            "description": "Will be None if captchas are disabled."
          }
        },
        "type": "object",
        "description": "A wrapper for the captcha response."
      },
      "DeleteAccount": {
        "properties": {
          "delete_content": {
            "type": "boolean"
          },
          "password": {
            "$ref": "#/components/schemas/SensitiveString"
          }
        },
        "required": [
          "delete_content",
          "password"
        ],
        "type": "object",
        "description": "Delete your account."
      },
      "PasswordReset": {
        "properties": {
          "email": {
            "$ref": "#/components/schemas/SensitiveString"
          }
        },
        "required": [
          "email"
        ],
        "type": "object",
        "description": "Reset your password via email."
      },
      "PasswordChangeAfterReset": {
        "properties": {
          "password_verify": {
            "$ref": "#/components/schemas/SensitiveString"
          },
          "password": {
            "$ref": "#/components/schemas/SensitiveString"
          },
          "token": {
            "$ref": "#/components/schemas/SensitiveString"
          }
        },
        "required": [
          "password_verify",
          "password",
          "token"
        ],
        "type": "object",
        "description": "Change your password after receiving a reset request."
      },
      "SaveUserSettings": {
        "properties": {
          "hide_media": {
            "type": "boolean",
            "description": "Whether to hide posts containing images/videos."
          },
          "auto_mark_fetched_posts_as_read": {
            "type": "boolean",
            "description": "Whether to automatically mark fetched posts as read."
          },
          "show_upvote_percentage": {
            "type": "boolean"
          },
          "show_downvotes": {
            "type": "boolean"
          },
          "show_upvotes": {
            "type": "boolean"
          },
          "show_scores": {
            "type": "boolean",
            "description": "Some vote display mode settings"
          },
          "collapse_bot_comments": {
            "type": "boolean",
            "description": "Whether to auto-collapse bot comments."
          },
          "enable_private_messages": {
            "type": "boolean",
            "description": "Whether a user can send / receive private messages"
          },
          "enable_animated_images": {
            "type": "boolean",
            "description": "Whether user avatars or inline images in the UI that are gifs should be allowed to play or\nshould be paused"
          },
          "enable_keyboard_navigation": {
            "type": "boolean",
            "description": "Whether to allow keyboard navigation (for browsing and interacting with posts and comments)."
          },
          "infinite_scroll_enabled": {
            "type": "boolean",
            "description": "Enable infinite scroll"
          },
          "open_links_in_new_tab": {
            "type": "boolean",
            "description": "Open links in a new tab"
          },
          "discussion_languages": {
            "items": {
              "$ref": "#/components/schemas/LanguageId"
            },
            "type": "array",
            "description": "A list of languages you are able to see discussion in."
          },
          "show_read_posts": {
            "type": "boolean",
            "description": "Whether to show read posts."
          },
          "show_bot_accounts": {
            "type": "boolean",
            "description": "Whether to show bot accounts."
          },
          "bot_account": {
            "type": "boolean",
            "description": "Whether this account is a bot account. Users can hide these accounts easily if they wish."
          },
          "send_notifications_to_email": {
            "type": "boolean",
            "description": "Sends notifications to your email."
          },
          "show_avatars": {
            "type": "boolean",
            "description": "Whether to show or hide avatars."
          },
          "matrix_user_id": {
            "type": "string",
            "description": "Your matrix user id. Ex:"
          },
          "bio": {
            "type": "string",
            "description": "Your bio / info, in markdown."
          },
          "email": {
            "$ref": "#/components/schemas/SensitiveString",
            "description": "Your email."
          },
          "display_name": {
            "type": "string",
            "description": "Your display name, which can contain strange characters, and does not need to be unique."
          },
          "interface_language": {
            "type": "string",
            "description": "The language of the lemmy interface"
          },
          "default_comment_sort_type": {
            "$ref": "#/components/schemas/CommentSortType",
            "description": "The default comment sort, usually \"hot\""
          },
          "default_post_sort_type": {
            "$ref": "#/components/schemas/PostSortType",
            "description": "The default post sort, usually \"active\""
          },
          "post_listing_mode": {
            "$ref": "#/components/schemas/PostListingMode",
            "description": "A post-view mode that changes how multiple post listings look."
          },
          "default_listing_type": {
            "$ref": "#/components/schemas/ListingType",
            "description": "The default post listing type, usually \"local\""
          },
          "theme": {
            "type": "string",
            "description": "Your user's theme."
          },
          "blur_nsfw": {
            "type": "boolean",
            "description": "Blur nsfw posts."
          },
          "show_nsfw": {
            "type": "boolean",
            "description": "Show nsfw posts."
          }
        },
        "type": "object",
        "description": "Saves settings for your user."
      },
      "ChangePassword": {
        "properties": {
          "old_password": {
            "$ref": "#/components/schemas/SensitiveString"
          },
          "new_password_verify": {
            "$ref": "#/components/schemas/SensitiveString"
          },
          "new_password": {
            "$ref": "#/components/schemas/SensitiveString"
          }
        },
        "required": [
          "old_password",
          "new_password_verify",
          "new_password"
        ],
        "type": "object",
        "description": "Changes your account password."
      },
      "GetReportCountResponse": {
        "properties": {
          "count": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "count"
        ],
        "type": "object",
        "description": "A response for the number of reports."
      },
      "GetReportCountI": {
        "properties": {
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "GetUnreadCountResponse": {
        "properties": {
          "count": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "count"
        ],
        "type": "object",
        "description": "A response containing a count of unread notifications."
      },
      "CommentReply": {
        "properties": {
          "published": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          },
          "recipient_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/CommentReplyId"
          }
        },
        "required": [
          "published",
          "read",
          "comment_id",
          "recipient_id",
          "id"
        ],
        "type": "object",
        "description": "A comment reply."
      },
      "CommentReplyView": {
        "properties": {
          "my_vote": {
            "type": "number",
            "format": "double"
          },
          "creator_blocked": {
            "type": "boolean"
          },
          "saved": {
            "type": "boolean"
          },
          "subscribed": {
            "$ref": "#/components/schemas/SubscribedType"
          },
          "creator_is_admin": {
            "type": "boolean"
          },
          "creator_is_moderator": {
            "type": "boolean"
          },
          "banned_from_community": {
            "type": "boolean"
          },
          "creator_banned_from_community": {
            "type": "boolean"
          },
          "counts": {
            "$ref": "#/components/schemas/CommentAggregates"
          },
          "recipient": {
            "$ref": "#/components/schemas/Person"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "comment": {
            "$ref": "#/components/schemas/Comment"
          },
          "comment_reply": {
            "$ref": "#/components/schemas/CommentReply"
          }
        },
        "required": [
          "creator_blocked",
          "saved",
          "subscribed",
          "creator_is_admin",
          "creator_is_moderator",
          "banned_from_community",
          "creator_banned_from_community",
          "counts",
          "recipient",
          "community",
          "post",
          "creator",
          "comment",
          "comment_reply"
        ],
        "type": "object",
        "description": "A comment reply view."
      },
      "PersonCommentMention": {
        "properties": {
          "published": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          },
          "recipient_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/PersonCommentMentionId"
          }
        },
        "required": [
          "published",
          "read",
          "comment_id",
          "recipient_id",
          "id"
        ],
        "type": "object",
        "description": "A person mention."
      },
      "PersonCommentMentionView": {
        "properties": {
          "my_vote": {
            "type": "number",
            "format": "double"
          },
          "creator_blocked": {
            "type": "boolean"
          },
          "saved": {
            "type": "boolean"
          },
          "subscribed": {
            "$ref": "#/components/schemas/SubscribedType"
          },
          "creator_is_admin": {
            "type": "boolean"
          },
          "creator_is_moderator": {
            "type": "boolean"
          },
          "banned_from_community": {
            "type": "boolean"
          },
          "creator_banned_from_community": {
            "type": "boolean"
          },
          "counts": {
            "$ref": "#/components/schemas/CommentAggregates"
          },
          "recipient": {
            "$ref": "#/components/schemas/Person"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "comment": {
            "$ref": "#/components/schemas/Comment"
          },
          "person_comment_mention": {
            "$ref": "#/components/schemas/PersonCommentMention"
          }
        },
        "required": [
          "creator_blocked",
          "saved",
          "subscribed",
          "creator_is_admin",
          "creator_is_moderator",
          "banned_from_community",
          "creator_banned_from_community",
          "counts",
          "recipient",
          "community",
          "post",
          "creator",
          "comment",
          "person_comment_mention"
        ],
        "type": "object",
        "description": "A person comment mention view."
      },
      "PersonPostMention": {
        "properties": {
          "published": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          },
          "recipient_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/PersonPostMentionId"
          }
        },
        "required": [
          "published",
          "read",
          "post_id",
          "recipient_id",
          "id"
        ],
        "type": "object",
        "description": "A person mention."
      },
      "PersonPostMentionView": {
        "properties": {
          "post_tags": {
            "$ref": "#/components/schemas/PostTags"
          },
          "unread_comments": {
            "type": "number",
            "format": "double"
          },
          "my_vote": {
            "type": "number",
            "format": "double"
          },
          "creator_blocked": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "read": {
            "type": "boolean"
          },
          "saved": {
            "type": "boolean"
          },
          "subscribed": {
            "$ref": "#/components/schemas/SubscribedType"
          },
          "creator_is_admin": {
            "type": "boolean"
          },
          "creator_is_moderator": {
            "type": "boolean"
          },
          "banned_from_community": {
            "type": "boolean"
          },
          "creator_banned_from_community": {
            "type": "boolean"
          },
          "counts": {
            "$ref": "#/components/schemas/PostAggregates"
          },
          "recipient": {
            "$ref": "#/components/schemas/Person"
          },
          "image_details": {
            "$ref": "#/components/schemas/ImageDetails"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          },
          "person_post_mention": {
            "$ref": "#/components/schemas/PersonPostMention"
          }
        },
        "required": [
          "post_tags",
          "unread_comments",
          "creator_blocked",
          "hidden",
          "read",
          "saved",
          "subscribed",
          "creator_is_admin",
          "creator_is_moderator",
          "banned_from_community",
          "creator_banned_from_community",
          "counts",
          "recipient",
          "community",
          "creator",
          "post",
          "person_post_mention"
        ],
        "type": "object",
        "description": "A person post mention view."
      },
      "InboxCombinedView": {
        "anyOf": [
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "CommentReply"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CommentReplyView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "CommentMention"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/PersonCommentMentionView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "PostMention"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/PersonPostMentionView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "PrivateMessage"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/PrivateMessageView"
              }
            ]
          }
        ]
      },
      "ListInboxResponse": {
        "properties": {
          "inbox": {
            "items": {
              "$ref": "#/components/schemas/InboxCombinedView"
            },
            "type": "array"
          }
        },
        "required": [
          "inbox"
        ],
        "type": "object",
        "description": "Get your inbox (replies, comment mentions, post mentions, and messages)"
      },
      "InboxDataType": {
        "type": "string",
        "enum": [
          "All",
          "CommentReply",
          "CommentMention",
          "PostMention",
          "PrivateMessage"
        ],
        "description": "A list of possible types for the inbox."
      },
      "InboxCombinedPaginationCursor": {
        "type": "string",
        "description": "like PaginationCursor but for the report_combined table"
      },
      "ListInboxI": {
        "properties": {
          "page_back": {
            "type": "boolean"
          },
          "page_cursor": {
            "$ref": "#/components/schemas/InboxCombinedPaginationCursor"
          },
          "unread_only": {
            "type": "boolean"
          },
          "type_": {
            "$ref": "#/components/schemas/InboxDataType"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "VerifyEmail": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object",
        "description": "Verify your email."
      },
      "ListPersonSavedResponse": {
        "properties": {
          "saved": {
            "items": {
              "$ref": "#/components/schemas/PersonContentCombinedView"
            },
            "type": "array"
          }
        },
        "required": [
          "saved"
        ],
        "type": "object",
        "description": "A person's saved content response."
      },
      "PersonSavedCombinedPaginationCursor": {
        "type": "string",
        "description": "like PaginationCursor but for the person_saved_combined table"
      },
      "ListPersonSavedI": {
        "properties": {
          "page_back": {
            "type": "boolean"
          },
          "page_cursor": {
            "$ref": "#/components/schemas/PersonSavedCombinedPaginationCursor"
          },
          "type_": {
            "$ref": "#/components/schemas/PersonContentType"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "AddAdminResponse": {
        "properties": {
          "admins": {
            "items": {
              "$ref": "#/components/schemas/PersonView"
            },
            "type": "array"
          }
        },
        "required": [
          "admins"
        ],
        "type": "object",
        "description": "The response of current admins."
      },
      "AddAdmin": {
        "properties": {
          "added": {
            "type": "boolean"
          },
          "person_id": {
            "$ref": "#/components/schemas/PersonId"
          }
        },
        "required": [
          "added",
          "person_id"
        ],
        "type": "object",
        "description": "Adds an admin to a site."
      },
      "GetUnreadRegistrationApplicationCountResponse": {
        "properties": {
          "registration_applications": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "registration_applications"
        ],
        "type": "object",
        "description": "The count of unread registration applications."
      },
      "RegistrationApplicationId": {
        "type": "number",
        "format": "double",
        "description": "The registration application id."
      },
      "RegistrationApplication": {
        "properties": {
          "published": {
            "type": "string"
          },
          "deny_reason": {
            "type": "string"
          },
          "admin_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "answer": {
            "type": "string"
          },
          "local_user_id": {
            "$ref": "#/components/schemas/LocalUserId"
          },
          "id": {
            "$ref": "#/components/schemas/RegistrationApplicationId"
          }
        },
        "required": [
          "published",
          "answer",
          "local_user_id",
          "id"
        ],
        "type": "object",
        "description": "A registration application."
      },
      "RegistrationApplicationView": {
        "properties": {
          "admin": {
            "$ref": "#/components/schemas/Person"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "creator_local_user": {
            "$ref": "#/components/schemas/LocalUser"
          },
          "registration_application": {
            "$ref": "#/components/schemas/RegistrationApplication"
          }
        },
        "required": [
          "creator",
          "creator_local_user",
          "registration_application"
        ],
        "type": "object",
        "description": "A registration application view."
      },
      "ListRegistrationApplicationsResponse": {
        "properties": {
          "registration_applications": {
            "items": {
              "$ref": "#/components/schemas/RegistrationApplicationView"
            },
            "type": "array"
          }
        },
        "required": [
          "registration_applications"
        ],
        "type": "object",
        "description": "The list of registration applications."
      },
      "ListRegistrationApplicationsI": {
        "properties": {
          "limit": {
            "type": "number",
            "format": "double"
          },
          "page": {
            "type": "number",
            "format": "double"
          },
          "unread_only": {
            "type": "boolean",
            "description": "Only shows the unread applications (IE those without an admin actor)"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "RegistrationApplicationResponse": {
        "properties": {
          "registration_application": {
            "$ref": "#/components/schemas/RegistrationApplicationView"
          }
        },
        "required": [
          "registration_application"
        ],
        "type": "object",
        "description": "The response of an action done to a registration application."
      },
      "ApproveRegistrationApplication": {
        "properties": {
          "deny_reason": {
            "type": "string"
          },
          "approve": {
            "type": "boolean"
          },
          "id": {
            "$ref": "#/components/schemas/RegistrationApplicationId"
          }
        },
        "required": [
          "approve",
          "id"
        ],
        "type": "object",
        "description": "Approves a registration application."
      },
      "GetRegistrationApplicationI": {
        "properties": {
          "person_id": {
            "$ref": "#/components/schemas/PersonId"
          }
        },
        "required": [
          "person_id"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PurgePerson": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "person_id": {
            "$ref": "#/components/schemas/PersonId"
          }
        },
        "required": [
          "person_id"
        ],
        "type": "object",
        "description": "Purges a person from the database. This will delete all content attached to that person."
      },
      "PurgeCommunity": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          }
        },
        "required": [
          "community_id"
        ],
        "type": "object",
        "description": "Purges a community from the database. This will delete all content attached to that community."
      },
      "PurgePost": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId"
          }
        },
        "required": [
          "post_id"
        ],
        "type": "object",
        "description": "Purges a post from the database. This will delete all content attached to that post."
      },
      "PurgeComment": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "comment_id": {
            "$ref": "#/components/schemas/CommentId"
          }
        },
        "required": [
          "comment_id"
        ],
        "type": "object",
        "description": "Purges a comment from the database. This will delete all content attached to that comment."
      },
      "CustomEmojiId": {
        "type": "number",
        "format": "double",
        "description": "The custom emoji id."
      },
      "CustomEmoji": {
        "properties": {
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "alt_text": {
            "type": "string"
          },
          "image_url": {
            "$ref": "#/components/schemas/DbUrl"
          },
          "shortcode": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/CustomEmojiId"
          }
        },
        "required": [
          "published",
          "category",
          "alt_text",
          "image_url",
          "shortcode",
          "id"
        ],
        "type": "object",
        "description": "A custom emoji."
      },
      "CustomEmojiKeyword": {
        "properties": {
          "keyword": {
            "type": "string"
          },
          "custom_emoji_id": {
            "$ref": "#/components/schemas/CustomEmojiId"
          }
        },
        "required": [
          "keyword",
          "custom_emoji_id"
        ],
        "type": "object",
        "description": "A custom keyword for an emoji."
      },
      "CustomEmojiView": {
        "properties": {
          "keywords": {
            "items": {
              "$ref": "#/components/schemas/CustomEmojiKeyword"
            },
            "type": "array"
          },
          "custom_emoji": {
            "$ref": "#/components/schemas/CustomEmoji"
          }
        },
        "required": [
          "keywords",
          "custom_emoji"
        ],
        "type": "object",
        "description": "A custom emoji view."
      },
      "CustomEmojiResponse": {
        "properties": {
          "custom_emoji": {
            "$ref": "#/components/schemas/CustomEmojiView"
          }
        },
        "required": [
          "custom_emoji"
        ],
        "type": "object",
        "description": "A response for a custom emoji."
      },
      "CreateCustomEmoji": {
        "properties": {
          "keywords": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "alt_text": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "shortcode": {
            "type": "string"
          },
          "category": {
            "type": "string"
          }
        },
        "required": [
          "keywords",
          "alt_text",
          "image_url",
          "shortcode",
          "category"
        ],
        "type": "object",
        "description": "Create a custom emoji."
      },
      "EditCustomEmoji": {
        "properties": {
          "keywords": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "alt_text": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/CustomEmojiId"
          }
        },
        "required": [
          "keywords",
          "alt_text",
          "image_url",
          "category",
          "id"
        ],
        "type": "object",
        "description": "Edit  a custom emoji."
      },
      "DeleteCustomEmoji": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CustomEmojiId"
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "description": "Delete a custom emoji."
      },
      "ListCustomEmojisResponse": {
        "properties": {
          "custom_emojis": {
            "items": {
              "$ref": "#/components/schemas/CustomEmojiView"
            },
            "type": "array"
          }
        },
        "required": [
          "custom_emojis"
        ],
        "type": "object",
        "description": "A response for custom emojis."
      },
      "ListCustomEmojisI": {
        "properties": {
          "ignore_page_limits": {
            "type": "boolean"
          },
          "category": {
            "type": "string"
          },
          "limit": {
            "type": "number",
            "format": "double"
          },
          "page": {
            "type": "number",
            "format": "double"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "TaglineResponse": {
        "properties": {
          "tagline": {
            "$ref": "#/components/schemas/Tagline"
          }
        },
        "required": [
          "tagline"
        ],
        "type": "object"
      },
      "CreateTagline": {
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": [
          "content"
        ],
        "type": "object",
        "description": "Create a tagline"
      },
      "TaglineId": {
        "type": "number",
        "format": "double",
        "description": "The tagline id."
      },
      "UpdateTagline": {
        "properties": {
          "content": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/TaglineId"
          }
        },
        "required": [
          "content",
          "id"
        ],
        "type": "object",
        "description": "Update a tagline"
      },
      "DeleteTagline": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TaglineId"
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "description": "Delete a tagline"
      },
      "ListTaglinesResponse": {
        "properties": {
          "taglines": {
            "items": {
              "$ref": "#/components/schemas/Tagline"
            },
            "type": "array"
          }
        },
        "required": [
          "taglines"
        ],
        "type": "object",
        "description": "A response for taglines."
      },
      "ListTaglinesI": {
        "properties": {
          "limit": {
            "type": "number",
            "format": "double"
          },
          "page": {
            "type": "number",
            "format": "double"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CreateOAuthProvider": {
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "use_pkce": {
            "type": "boolean"
          },
          "account_linking_enabled": {
            "type": "boolean"
          },
          "auto_verify_email": {
            "type": "boolean"
          },
          "scopes": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "id_claim": {
            "type": "string"
          },
          "userinfo_endpoint": {
            "type": "string"
          },
          "token_endpoint": {
            "type": "string"
          },
          "authorization_endpoint": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          }
        },
        "required": [
          "scopes",
          "client_secret",
          "client_id",
          "id_claim",
          "userinfo_endpoint",
          "token_endpoint",
          "authorization_endpoint",
          "issuer",
          "display_name"
        ],
        "type": "object",
        "description": "Create an external auth method."
      },
      "EditOAuthProvider": {
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "use_pkce": {
            "type": "boolean"
          },
          "account_linking_enabled": {
            "type": "boolean"
          },
          "auto_verify_email": {
            "type": "boolean"
          },
          "scopes": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "id_claim": {
            "type": "string"
          },
          "userinfo_endpoint": {
            "type": "string"
          },
          "token_endpoint": {
            "type": "string"
          },
          "authorization_endpoint": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/OAuthProviderId"
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "description": "Edit an external auth method."
      },
      "DeleteOAuthProvider": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OAuthProviderId"
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "description": "Delete an external auth method."
      },
      "AuthenticateWithOauth": {
        "properties": {
          "pkce_code_verifier": {
            "type": "string"
          },
          "answer": {
            "type": "string",
            "description": "An answer is mandatory if require application is enabled on the server"
          },
          "username": {
            "type": "string",
            "description": "Username is mandatory at registration time"
          },
          "show_nsfw": {
            "type": "boolean"
          },
          "redirect_uri": {
            "type": "string"
          },
          "oauth_provider_id": {
            "$ref": "#/components/schemas/OAuthProviderId"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "redirect_uri",
          "oauth_provider_id",
          "code"
        ],
        "type": "object",
        "description": "Logging in with an OAuth 2.0 authorization"
      },
      "ActivityId": {
        "type": "number",
        "format": "double"
      },
      "ReadableFederationState": {
        "properties": {
          "last_retry": {
            "type": "string",
            "description": "timestamp of the last retry attempt (when the last failing activity was resent)"
          },
          "fail_count": {
            "type": "number",
            "format": "double",
            "description": "how many failed attempts have been made to send the next activity"
          },
          "last_successful_published_time": {
            "type": "string"
          },
          "last_successful_id": {
            "$ref": "#/components/schemas/ActivityId",
            "description": "the last successfully sent activity id"
          },
          "instance_id": {
            "$ref": "#/components/schemas/InstanceId"
          },
          "next_retry": {
            "type": "string",
            "description": "timestamp of the next retry attempt (null if fail count is 0)"
          }
        },
        "required": [
          "fail_count",
          "instance_id"
        ],
        "type": "object"
      },
      "InstanceWithFederationState": {
        "properties": {
          "version": {
            "type": "string"
          },
          "software": {
            "type": "string"
          },
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/InstanceId"
          },
          "federation_state": {
            "$ref": "#/components/schemas/ReadableFederationState",
            "description": "if federation to this instance is or was active, show state of outgoing federation to this\ninstance"
          }
        },
        "required": [
          "published",
          "domain",
          "id"
        ],
        "type": "object"
      },
      "FederatedInstances": {
        "properties": {
          "blocked": {
            "items": {
              "$ref": "#/components/schemas/InstanceWithFederationState"
            },
            "type": "array"
          },
          "allowed": {
            "items": {
              "$ref": "#/components/schemas/InstanceWithFederationState"
            },
            "type": "array"
          },
          "linked": {
            "items": {
              "$ref": "#/components/schemas/InstanceWithFederationState"
            },
            "type": "array"
          }
        },
        "required": [
          "blocked",
          "allowed",
          "linked"
        ],
        "type": "object",
        "description": "A list of federated instances."
      },
      "GetFederatedInstancesResponse": {
        "properties": {
          "federated_instances": {
            "$ref": "#/components/schemas/FederatedInstances",
            "description": "Optional, because federation may be disabled."
          }
        },
        "type": "object",
        "description": "A response of federated instances."
      },
      "CommunityReportId": {
        "type": "number",
        "format": "double",
        "description": "The community report id."
      },
      "CommunityReport": {
        "properties": {
          "updated": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "resolver_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "resolved": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "original_community_banner": {
            "type": "string"
          },
          "original_community_icon": {
            "type": "string"
          },
          "original_community_sidebar": {
            "type": "string"
          },
          "original_community_description": {
            "type": "string"
          },
          "original_community_title": {
            "type": "string"
          },
          "original_community_name": {
            "type": "string"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId"
          },
          "creator_id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "id": {
            "$ref": "#/components/schemas/CommunityReportId"
          }
        },
        "required": [
          "published",
          "resolved",
          "reason",
          "original_community_title",
          "original_community_name",
          "community_id",
          "creator_id",
          "id"
        ],
        "type": "object",
        "description": "A comment report."
      },
      "CommunityReportView": {
        "properties": {
          "resolver": {
            "$ref": "#/components/schemas/Person"
          },
          "subscribed": {
            "$ref": "#/components/schemas/SubscribedType"
          },
          "counts": {
            "$ref": "#/components/schemas/CommunityAggregates"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "community": {
            "$ref": "#/components/schemas/Community"
          },
          "community_report": {
            "$ref": "#/components/schemas/CommunityReport"
          }
        },
        "required": [
          "subscribed",
          "counts",
          "creator",
          "community",
          "community_report"
        ],
        "type": "object",
        "description": "A community report view."
      },
      "ReportCombinedView": {
        "anyOf": [
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "Post"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/PostReportView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "Comment"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CommentReportView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "PrivateMessage"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/PrivateMessageReportView"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "type_": {
                    "type": "string",
                    "enum": [
                      "Community"
                    ],
                    "nullable": false
                  }
                },
                "required": [
                  "type_"
                ],
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CommunityReportView"
              }
            ]
          }
        ]
      },
      "ListReportsResponse": {
        "properties": {
          "reports": {
            "items": {
              "$ref": "#/components/schemas/ReportCombinedView"
            },
            "type": "array"
          }
        },
        "required": [
          "reports"
        ],
        "type": "object",
        "description": "The post reports response."
      },
      "ReportType": {
        "type": "string",
        "enum": [
          "All",
          "Posts",
          "Comments",
          "PrivateMessages",
          "Communities"
        ],
        "description": "A list of possible types for reports."
      },
      "ReportCombinedPaginationCursor": {
        "type": "string",
        "description": "like PaginationCursor but for the report_combined table"
      },
      "ListReportsI": {
        "properties": {
          "page_back": {
            "type": "boolean"
          },
          "page_cursor": {
            "$ref": "#/components/schemas/ReportCombinedPaginationCursor"
          },
          "community_id": {
            "$ref": "#/components/schemas/CommunityId",
            "description": "if no community is given, it returns reports for all communities moderated by the auth user"
          },
          "post_id": {
            "$ref": "#/components/schemas/PostId",
            "description": "Filter by the post id. Can return either comment or post reports."
          },
          "type_": {
            "$ref": "#/components/schemas/ReportType",
            "description": "Filter the type of report."
          },
          "unresolved_only": {
            "type": "boolean",
            "description": "Only shows the unresolved reports"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "UserBlockInstanceParams": {
        "properties": {
          "block": {
            "type": "boolean"
          },
          "instance_id": {
            "$ref": "#/components/schemas/InstanceId"
          }
        },
        "required": [
          "block",
          "instance_id"
        ],
        "type": "object",
        "description": "Block an instance as user"
      },
      "AdminBlockInstanceParams": {
        "properties": {
          "expires": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "block": {
            "type": "boolean"
          },
          "instance": {
            "type": "string"
          }
        },
        "required": [
          "block",
          "instance"
        ],
        "type": "object"
      },
      "AdminAllowInstanceParams": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "allow": {
            "type": "boolean"
          },
          "instance": {
            "type": "string"
          }
        },
        "required": [
          "allow",
          "instance"
        ],
        "type": "object"
      },
      "UploadImageResponse": {
        "properties": {
          "filename": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          }
        },
        "required": [
          "filename",
          "image_url"
        ],
        "type": "object"
      },
      "DeleteImageParamsI": {
        "properties": {
          "filename": {
            "type": "string"
          }
        },
        "required": [
          "filename"
        ],
        "type": "object",
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "info": {
    "title": "lemmy-js-client",
    "version": "0.20.0-search-combined.1",
    "description": "A javascript / typescript client for Lemmy",
    "license": {
      "name": "AGPL-3.0"
    },
    "contact": {
      "name": "Dessalines"
    }
  },
  "paths": {
    "/api/v4/site": {
      "get": {
        "operationId": "GetSite",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSiteResponse"
                }
              }
            }
          }
        },
        "summary": "Gets the site, and your user data.",
        "tags": [
          "Site"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": []
      },
      "post": {
        "operationId": "CreateSite",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteResponse"
                }
              }
            }
          }
        },
        "summary": "Create your site.",
        "tags": [
          "Site"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSite"
              }
            }
          }
        }
      },
      "put": {
        "operationId": "EditSite",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteResponse"
                }
              }
            }
          }
        },
        "summary": "Edit your site.",
        "tags": [
          "Site"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditSite"
              }
            }
          }
        }
      }
    },
    "/api/v4/admin/leave": {
      "post": {
        "operationId": "LeaveAdmin",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSiteResponse"
                }
              }
            }
          }
        },
        "summary": "Leave the Site admins.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/account/auth/totp/generate": {
      "post": {
        "operationId": "GenerateTotpSecret",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateTotpSecretResponse"
                }
              }
            }
          }
        },
        "summary": "Generate a TOTP / two-factor secret.\n\nGenerate a TOTP / two-factor secret.\nAfterwards you need to call `/account/auth/totp/update` with a valid token to enable it.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/account": {
      "get": {
        "operationId": "GetMyUser",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyUserInfo"
                }
              }
            }
          }
        },
        "summary": "Get data of current user.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/account/settings/export": {
      "get": {
        "operationId": "ExportSettings",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Export a backup of your user settings.\n\nExport a backup of your user settings, including your saved content,\nfollowed communities, and blocks.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/account/settings/import": {
      "post": {
        "operationId": "ImportSettings",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Import a backup of your user settings.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        }
      }
    },
    "/api/v4/account/list_logins": {
      "get": {
        "operationId": "ListLogins",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LoginToken"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List login tokens for your user",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/account/validate_auth": {
      "get": {
        "operationId": "ValidateAuth",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Returns an error message if your auth token is invalid",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/account/list_media": {
      "get": {
        "operationId": "ListMedia",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMediaResponse"
                }
              }
            }
          }
        },
        "summary": "List all the media for your user",
        "tags": [
          "Account",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ]
      }
    },
    "/api/v4/admin/list_all_media": {
      "get": {
        "operationId": "ListAllMedia",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMediaResponse"
                }
              }
            }
          }
        },
        "summary": "List all the media known to your instance.",
        "tags": [
          "Admin",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ]
      }
    },
    "/api/v4/account/auth/totp/update": {
      "post": {
        "operationId": "UpdateTotp",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTotpResponse"
                }
              }
            }
          }
        },
        "summary": "Enable / Disable TOTP / two-factor authentication.\n\nTo enable, you need to first call `/account/auth/totp/generate` and then pass a valid token to this.\n\nDisabling is only possible if 2FA was previously enabled. Again it is necessary to pass a valid token.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTotp"
              }
            }
          }
        }
      }
    },
    "/api/v4/modlog": {
      "get": {
        "operationId": "GetModlog",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetModlogResponse"
                }
              }
            }
          }
        },
        "summary": "Get the modlog.",
        "tags": [
          "Miscellaneous"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page_back",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "page_cursor",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ModlogCombinedPaginationCursor"
            }
          },
          {
            "in": "query",
            "name": "comment_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentId"
            }
          },
          {
            "in": "query",
            "name": "post_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PostId"
            }
          },
          {
            "in": "query",
            "name": "other_person_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PersonId"
            }
          },
          {
            "in": "query",
            "name": "type_",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ModlogActionType"
            }
          },
          {
            "in": "query",
            "name": "community_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommunityId"
            }
          },
          {
            "in": "query",
            "name": "mod_person_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PersonId"
            }
          }
        ]
      }
    },
    "/api/v4/search": {
      "get": {
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          }
        },
        "summary": "Search lemmy.",
        "tags": [
          "Miscellaneous"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page_back",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "page_cursor",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SearchCombinedPaginationCursor"
            }
          },
          {
            "in": "query",
            "name": "disliked_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "liked_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "post_url_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "title_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "listing_type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ListingType"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SearchSortType"
            }
          },
          {
            "in": "query",
            "name": "type_",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SearchType"
            }
          },
          {
            "in": "query",
            "name": "creator_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PersonId"
            }
          },
          {
            "in": "query",
            "name": "community_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "community_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommunityId"
            }
          },
          {
            "in": "query",
            "name": "search_term",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4/resolve_object": {
      "get": {
        "operationId": "ResolveObject",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResolveObjectResponse"
                }
              }
            }
          }
        },
        "summary": "Fetch a non-local / federated object.",
        "tags": [
          "Miscellaneous"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "description": "Can be the full url, or a shortened version like: !fediverse@lemmy.ml",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4/community": {
      "post": {
        "operationId": "CreateCommunity",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResponse"
                }
              }
            }
          }
        },
        "summary": "Create a new community.",
        "tags": [
          "Community"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommunity"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "GetCommunity",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCommunityResponse"
                }
              }
            }
          }
        },
        "summary": "Get / fetch a community.",
        "tags": [
          "Community"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "description": "Example: star_trek , or star_trek@xyz.tld",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommunityId"
            }
          }
        ]
      },
      "put": {
        "operationId": "EditCommunity",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResponse"
                }
              }
            }
          }
        },
        "summary": "Edit a community.",
        "tags": [
          "Community"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCommunity"
              }
            }
          }
        }
      }
    },
    "/api/v4/community/list": {
      "get": {
        "operationId": "ListCommunities",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCommunitiesResponse"
                }
              }
            }
          }
        },
        "summary": "List communities, with various filters.",
        "tags": [
          "Community"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "show_nsfw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommunitySortType"
            }
          },
          {
            "in": "query",
            "name": "type_",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ListingType"
            }
          }
        ]
      }
    },
    "/api/v4/community/follow": {
      "post": {
        "operationId": "FollowCommunity",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResponse"
                }
              }
            }
          }
        },
        "summary": "Follow / subscribe to a community.",
        "tags": [
          "Community"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FollowCommunity"
              }
            }
          }
        }
      }
    },
    "/api/v4/community/pending_follows/count": {
      "get": {
        "operationId": "GetCommunityPendingFollowsCount",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCommunityPendingFollowsCountResponse"
                }
              }
            }
          }
        },
        "summary": "Get a community's pending follows count.",
        "tags": [
          "Community"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "community_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CommunityId"
            }
          }
        ]
      }
    },
    "/api/v4/community/pending_follows/list": {
      "get": {
        "operationId": "ListCommunityPendingFollows",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCommunityPendingFollowsResponse"
                }
              }
            }
          }
        },
        "summary": "Get a community's pending followers.",
        "tags": [
          "Community"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "all_communities",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only shows the unapproved applications",
            "in": "query",
            "name": "pending_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/v4/community/pending_follows/approve": {
      "post": {
        "operationId": "ApproveCommunityPendingFollow",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Approve a community pending follow request.",
        "tags": [
          "Community"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveCommunityPendingFollower"
              }
            }
          }
        }
      }
    },
    "/api/v4/account/block/community": {
      "post": {
        "operationId": "BlockCommunity",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockCommunityResponse"
                }
              }
            }
          }
        },
        "summary": "Block a community.",
        "tags": [
          "Account",
          "Community"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockCommunity"
              }
            }
          }
        }
      }
    },
    "/api/v4/community/delete": {
      "post": {
        "operationId": "DeleteCommunity",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResponse"
                }
              }
            }
          }
        },
        "summary": "Delete a community.",
        "tags": [
          "Community"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCommunity"
              }
            }
          }
        }
      }
    },
    "/api/v4/community/hide": {
      "put": {
        "operationId": "HideCommunity",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Hide a community from public / \"All\" view. Admins only.",
        "tags": [
          "Community",
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HideCommunity"
              }
            }
          }
        }
      }
    },
    "/api/v4/community/remove": {
      "post": {
        "operationId": "RemoveCommunity",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResponse"
                }
              }
            }
          }
        },
        "summary": "A moderator remove for a community.",
        "tags": [
          "Community",
          "Moderator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveCommunity"
              }
            }
          }
        }
      }
    },
    "/api/v4/community/transfer": {
      "post": {
        "operationId": "TransferCommunity",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCommunityResponse"
                }
              }
            }
          }
        },
        "summary": "Transfer your community to an existing moderator.",
        "tags": [
          "Community",
          "Moderator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferCommunity"
              }
            }
          }
        }
      }
    },
    "/api/v4/community/ban_user": {
      "post": {
        "operationId": "BanFromCommunity",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BanFromCommunityResponse"
                }
              }
            }
          }
        },
        "summary": "Ban a user from a community.",
        "tags": [
          "Community",
          "Moderator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BanFromCommunity"
              }
            }
          }
        }
      }
    },
    "/api/v4/community/mod": {
      "post": {
        "operationId": "AddModToCommunity",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddModToCommunityResponse"
                }
              }
            }
          }
        },
        "summary": "Add a moderator to your community.",
        "tags": [
          "Community",
          "Moderator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddModToCommunity"
              }
            }
          }
        }
      }
    },
    "/api/v4/community/random": {
      "get": {
        "operationId": "GetRandomCommunity",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResponse"
                }
              }
            }
          }
        },
        "summary": "Get a random community.",
        "tags": [
          "Community"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "show_nsfw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "type_",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ListingType"
            }
          }
        ]
      }
    },
    "/api/v4/post": {
      "post": {
        "operationId": "CreatePost",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "summary": "Create a post.",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePost"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "GetPost",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostResponse"
                }
              }
            }
          }
        },
        "summary": "Get / fetch a post.",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "comment_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentId"
            }
          },
          {
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PostId"
            }
          }
        ]
      },
      "put": {
        "operationId": "EditPost",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "summary": "Edit a post.",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPost"
              }
            }
          }
        }
      }
    },
    "/api/v4/post/delete": {
      "post": {
        "operationId": "DeletePost",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "summary": "Delete a post.",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePost"
              }
            }
          }
        }
      }
    },
    "/api/v4/post/remove": {
      "post": {
        "operationId": "RemovePost",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "summary": "A moderator remove for a post.",
        "tags": [
          "Post",
          "Moderator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemovePost"
              }
            }
          }
        }
      }
    },
    "/api/v4/post/mark_as_read": {
      "post": {
        "operationId": "MarkPostAsRead",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Mark a post as read.",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkPostAsRead"
              }
            }
          }
        }
      }
    },
    "/api/v4/post/mark_as_read/many": {
      "post": {
        "operationId": "MarkManyPostAsRead",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Mark multiple posts as read.",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkManyPostsAsRead"
              }
            }
          }
        }
      }
    },
    "/api/v4/post/hide": {
      "post": {
        "operationId": "HidePost",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Hide a post from list views.",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HidePost"
              }
            }
          }
        }
      }
    },
    "/api/v4/post/lock": {
      "post": {
        "operationId": "LockPost",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "summary": "A moderator can lock a post ( IE disable new comments ).",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockPost"
              }
            }
          }
        }
      }
    },
    "/api/v4/post/feature": {
      "post": {
        "operationId": "FeaturePost",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "summary": "A moderator can feature a community post ( IE stick it to the top of a community ).",
        "tags": [
          "Post",
          "Moderator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeaturePost"
              }
            }
          }
        }
      }
    },
    "/api/v4/post/list": {
      "get": {
        "operationId": "GetPosts",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostsResponse"
                }
              }
            }
          }
        },
        "summary": "Get / fetch posts, with various filters.",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page_back",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "page_cursor",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PaginationCursor"
            }
          },
          {
            "description": "If true, then only show posts with no comments",
            "in": "query",
            "name": "no_comments_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Whether to automatically mark fetched posts as read.",
            "in": "query",
            "name": "mark_as_read",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If false, then show posts with media attached (even if your user setting is to hide them)",
            "in": "query",
            "name": "hide_media",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If true, then show the nsfw posts (even if your user setting is to hide them)",
            "in": "query",
            "name": "show_nsfw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If true, then show the read posts (even if your user setting is to hide them)",
            "in": "query",
            "name": "show_read",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "show_hidden",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "disliked_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "liked_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "read_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "saved_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "community_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "community_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommunityId"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "description": "DEPRECATED, use page_cursor",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PostSortType"
            }
          },
          {
            "in": "query",
            "name": "type_",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ListingType"
            }
          }
        ]
      }
    },
    "/api/v4/post/like": {
      "post": {
        "operationId": "LikePost",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "summary": "Like / vote on a post.",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostLike"
              }
            }
          }
        }
      }
    },
    "/api/v4/post/like/list": {
      "get": {
        "operationId": "ListPostLikes",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPostLikesResponse"
                }
              }
            }
          }
        },
        "summary": "List a post's likes. Admin-only.",
        "tags": [
          "Post",
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "post_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PostId"
            }
          }
        ]
      }
    },
    "/api/v4/post/save": {
      "put": {
        "operationId": "SavePost",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "summary": "Save a post.",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavePost"
              }
            }
          }
        }
      }
    },
    "/api/v4/post/report": {
      "post": {
        "operationId": "CreatePostReport",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostReportResponse"
                }
              }
            }
          }
        },
        "summary": "Report a post.",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostReport"
              }
            }
          }
        }
      }
    },
    "/api/v4/post/report/resolve": {
      "put": {
        "operationId": "ResolvePostReport",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostReportResponse"
                }
              }
            }
          }
        },
        "summary": "Resolve a post report. Only a mod can do this.",
        "tags": [
          "Post",
          "Moderator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolvePostReport"
              }
            }
          }
        }
      }
    },
    "/api/v4/post/site_metadata": {
      "get": {
        "operationId": "GetSiteMetadata",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSiteMetadataResponse"
                }
              }
            }
          }
        },
        "summary": "Fetch metadata for any given site.",
        "tags": [
          "Miscellaneous",
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4/comment": {
      "post": {
        "operationId": "CreateComment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "summary": "Create a comment.",
        "tags": [
          "Comment"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComment"
              }
            }
          }
        }
      },
      "put": {
        "operationId": "EditComment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "summary": "Edit a comment.",
        "tags": [
          "Comment"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditComment"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "GetComment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "summary": "Get / fetch comment.",
        "tags": [
          "Comment"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CommentId"
            }
          }
        ]
      }
    },
    "/api/v4/comment/delete": {
      "post": {
        "operationId": "DeleteComment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "summary": "Delete a comment.",
        "tags": [
          "Comment"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteComment"
              }
            }
          }
        }
      }
    },
    "/api/v4/comment/remove": {
      "post": {
        "operationId": "RemoveComment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "summary": "A moderator remove for a comment.",
        "tags": [
          "Comment",
          "Moderator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveComment"
              }
            }
          }
        }
      }
    },
    "/api/v4/comment/mark_as_read": {
      "post": {
        "operationId": "MarkCommentReplyAsRead",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Mark a comment as read.",
        "tags": [
          "Comment"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkCommentReplyAsRead"
              }
            }
          }
        }
      }
    },
    "/api/v4/comment/like": {
      "post": {
        "operationId": "LikeComment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "summary": "Like / vote on a comment.",
        "tags": [
          "Comment"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentLike"
              }
            }
          }
        }
      }
    },
    "/api/v4/comment/like/list": {
      "get": {
        "operationId": "ListCommentLikes",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCommentLikesResponse"
                }
              }
            }
          }
        },
        "summary": "List a comment's likes. Admin-only.",
        "tags": [
          "Comment",
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "comment_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CommentId"
            }
          }
        ]
      }
    },
    "/api/v4/comment/save": {
      "put": {
        "operationId": "SaveComment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "summary": "Save a comment.",
        "tags": [
          "Comment"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveComment"
              }
            }
          }
        }
      }
    },
    "/api/v4/comment/distinguish": {
      "post": {
        "operationId": "DistinguishComment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "summary": "Distinguishes a comment (speak as moderator)",
        "tags": [
          "Comment",
          "Moderator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DistinguishComment"
              }
            }
          }
        }
      }
    },
    "/api/v4/comment/list": {
      "get": {
        "operationId": "GetComments",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCommentsResponse"
                }
              }
            }
          }
        },
        "summary": "Get / fetch comments.",
        "tags": [
          "Comment"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "disliked_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "liked_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "parent_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentId"
            }
          },
          {
            "in": "query",
            "name": "post_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PostId"
            }
          },
          {
            "in": "query",
            "name": "community_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "community_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommunityId"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "max_depth",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentSortType"
            }
          },
          {
            "in": "query",
            "name": "type_",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ListingType"
            }
          }
        ]
      }
    },
    "/api/v4/comment/list/slim": {
      "get": {
        "operationId": "GetCommentsSlim",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCommentsSlimResponse"
                }
              }
            }
          }
        },
        "summary": "Get / fetch comments, but without the post or community.",
        "tags": [
          "Comment"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "disliked_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "liked_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "parent_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentId"
            }
          },
          {
            "in": "query",
            "name": "post_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PostId"
            }
          },
          {
            "in": "query",
            "name": "community_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "community_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommunityId"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "max_depth",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentSortType"
            }
          },
          {
            "in": "query",
            "name": "type_",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ListingType"
            }
          }
        ]
      }
    },
    "/api/v4/comment/report": {
      "post": {
        "operationId": "CreateCommentReport",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentReportResponse"
                }
              }
            }
          }
        },
        "summary": "Report a comment.",
        "tags": [
          "Comment"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentReport"
              }
            }
          }
        }
      }
    },
    "/api/v4/comment/report/resolve": {
      "put": {
        "operationId": "ResolveCommentReport",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentReportResponse"
                }
              }
            }
          }
        },
        "summary": "Resolve a comment report. Only a mod can do this.",
        "tags": [
          "Comment",
          "Moderator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveCommentReport"
              }
            }
          }
        }
      }
    },
    "/api/v4/private_message": {
      "post": {
        "operationId": "CreatePrivateMessage",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateMessageResponse"
                }
              }
            }
          }
        },
        "summary": "Create a private message.",
        "tags": [
          "PrivateMessage"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrivateMessage"
              }
            }
          }
        }
      },
      "put": {
        "operationId": "EditPrivateMessage",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateMessageResponse"
                }
              }
            }
          }
        },
        "summary": "Edit a private message.",
        "tags": [
          "PrivateMessage"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPrivateMessage"
              }
            }
          }
        }
      }
    },
    "/api/v4/private_message/delete": {
      "post": {
        "operationId": "DeletePrivateMessage",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateMessageResponse"
                }
              }
            }
          }
        },
        "summary": "Delete a private message.",
        "tags": [
          "PrivateMessage"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePrivateMessage"
              }
            }
          }
        }
      }
    },
    "/api/v4/private_message/mark_as_read": {
      "post": {
        "operationId": "MarkPrivateMessageAsRead",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateMessageResponse"
                }
              }
            }
          }
        },
        "summary": "Mark a private message as read.",
        "tags": [
          "PrivateMessage"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkPrivateMessageAsRead"
              }
            }
          }
        }
      }
    },
    "/api/v4/private_message/report": {
      "post": {
        "operationId": "CreatePrivateMessageReport",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateMessageReportResponse"
                }
              }
            }
          }
        },
        "summary": "Create a report for a private message.",
        "tags": [
          "PrivateMessage"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrivateMessageReport"
              }
            }
          }
        }
      }
    },
    "/api/v4/private_message/report/resolve": {
      "put": {
        "operationId": "ResolvePrivateMessageReport",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateMessageReportResponse"
                }
              }
            }
          }
        },
        "summary": "Resolve a report for a private message.",
        "tags": [
          "PrivateMessage",
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolvePrivateMessageReport"
              }
            }
          }
        }
      }
    },
    "/api/v4/account/auth/register": {
      "post": {
        "operationId": "Register",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          }
        },
        "summary": "Register a new user.",
        "tags": [
          "Account"
        ],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            }
          }
        }
      }
    },
    "/api/v4/account/auth/login": {
      "post": {
        "operationId": "Login",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          }
        },
        "summary": "Log into lemmy.",
        "tags": [
          "Account"
        ],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        }
      }
    },
    "/api/v4/account/auth/logout": {
      "post": {
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Invalidate the currently used auth token.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/person": {
      "get": {
        "operationId": "GetPersonDetails",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPersonDetailsResponse"
                }
              }
            }
          }
        },
        "summary": "Get the details for a person.",
        "tags": [
          "Person"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "description": "Example: dessalines , or dessalines@xyz.tld",
            "in": "query",
            "name": "username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "person_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PersonId"
            }
          }
        ]
      }
    },
    "/api/v4/person/content": {
      "get": {
        "operationId": "ListPersonContent",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPersonContentResponse"
                }
              }
            }
          }
        },
        "summary": "List the content for a person.",
        "tags": [
          "Person"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page_back",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "page_cursor",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PersonContentCombinedPaginationCursor"
            }
          },
          {
            "description": "Example: dessalines , or dessalines@xyz.tld",
            "in": "query",
            "name": "username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "person_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PersonId"
            }
          },
          {
            "in": "query",
            "name": "type_",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PersonContentType"
            }
          }
        ]
      }
    },
    "/api/v4/account/mention/comment/mark_as_read": {
      "post": {
        "operationId": "MarkCommentMentionAsRead",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Mark a person mention as read.",
        "tags": [
          "Account",
          "Person"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkPersonCommentMentionAsRead"
              }
            }
          }
        }
      }
    },
    "/api/v4/account/mention/post/mark_as_read": {
      "post": {
        "operationId": "MarkPostMentionAsRead",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Mark a person post body mention as read.",
        "tags": [
          "Account",
          "Post"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkPersonPostMentionAsRead"
              }
            }
          }
        }
      }
    },
    "/api/v4/admin/ban": {
      "post": {
        "operationId": "BanPerson",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BanPersonResponse"
                }
              }
            }
          }
        },
        "summary": "Ban a person from your site.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BanPerson"
              }
            }
          }
        }
      }
    },
    "/api/v4/admin/banned": {
      "get": {
        "operationId": "GetBannedPersons",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BannedPersonsResponse"
                }
              }
            }
          }
        },
        "summary": "Get a list of banned users.",
        "tags": [
          "Admin",
          "Miscellaneous"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/account/block/person": {
      "post": {
        "operationId": "BlockPerson",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockPersonResponse"
                }
              }
            }
          }
        },
        "summary": "Block a person.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockPerson"
              }
            }
          }
        }
      }
    },
    "/api/v4/account/auth/get_captcha": {
      "get": {
        "operationId": "GetCaptcha",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCaptchaResponse"
                }
              }
            }
          }
        },
        "summary": "Fetch a Captcha.",
        "tags": [
          "Account"
        ],
        "security": [],
        "parameters": []
      }
    },
    "/api/v4/account/delete": {
      "post": {
        "operationId": "DeleteAccount",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Delete your account.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAccount"
              }
            }
          }
        }
      }
    },
    "/api/v4/account/auth/password_reset": {
      "post": {
        "operationId": "PasswordReset",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Reset your password.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordReset"
              }
            }
          }
        }
      }
    },
    "/api/v4/account/auth/password_change": {
      "post": {
        "operationId": "PasswordChangeAfterReset",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Change your password from an email / token based reset.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeAfterReset"
              }
            }
          }
        }
      }
    },
    "/api/v4/account/mark_as_read/all": {
      "post": {
        "operationId": "MarkAllNotificationsAsRead",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Mark all replies as read.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/account/settings/save": {
      "put": {
        "operationId": "SaveUserSettings",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Save your user settings.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveUserSettings"
              }
            }
          }
        }
      }
    },
    "/api/v4/account/auth/change_password": {
      "put": {
        "operationId": "ChangePassword",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          }
        },
        "summary": "Change your user password.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePassword"
              }
            }
          }
        }
      }
    },
    "/api/v4/account/report_count": {
      "get": {
        "operationId": "GetReportCount",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReportCountResponse"
                }
              }
            }
          }
        },
        "summary": "Get counts for your reports.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "community_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommunityId"
            }
          }
        ]
      }
    },
    "/api/v4/account/unread_count": {
      "get": {
        "operationId": "GetUnreadCount",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUnreadCountResponse"
                }
              }
            }
          }
        },
        "summary": "Get your unread counts.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/account/inbox": {
      "get": {
        "operationId": "ListInbox",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListInboxResponse"
                }
              }
            }
          }
        },
        "summary": "Get your inbox (replies, comment mentions, post mentions, and messages)",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page_back",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "page_cursor",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/InboxCombinedPaginationCursor"
            }
          },
          {
            "in": "query",
            "name": "unread_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "type_",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/InboxDataType"
            }
          }
        ]
      }
    },
    "/api/v4/account/auth/verify_email": {
      "post": {
        "operationId": "VerifyEmail",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Verify your email",
        "tags": [
          "Account"
        ],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmail"
              }
            }
          }
        }
      }
    },
    "/api/v4/account/auth/saved": {
      "get": {
        "operationId": "ListPersonSaved",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPersonSavedResponse"
                }
              }
            }
          }
        },
        "summary": "List your saved content.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page_back",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "page_cursor",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PersonSavedCombinedPaginationCursor"
            }
          },
          {
            "in": "query",
            "name": "type_",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PersonContentType"
            }
          }
        ]
      }
    },
    "/api/v4/admin/add": {
      "post": {
        "operationId": "AddAdmin",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddAdminResponse"
                }
              }
            }
          }
        },
        "summary": "Add an admin to your site.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAdmin"
              }
            }
          }
        }
      }
    },
    "/api/v4/admin/registration_application/count": {
      "get": {
        "operationId": "GetUnreadRegistrationApplicationCount",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUnreadRegistrationApplicationCountResponse"
                }
              }
            }
          }
        },
        "summary": "Get the unread registration applications count.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/admin/registration_application/list": {
      "get": {
        "operationId": "ListRegistrationApplications",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRegistrationApplicationsResponse"
                }
              }
            }
          }
        },
        "summary": "List the registration applications.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "description": "Only shows the unread applications (IE those without an admin actor)",
            "in": "query",
            "name": "unread_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/v4/admin/registration_application/approve": {
      "put": {
        "operationId": "ApproveRegistrationApplication",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationApplicationResponse"
                }
              }
            }
          }
        },
        "summary": "Approve a registration application",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveRegistrationApplication"
              }
            }
          }
        }
      }
    },
    "/api/v4/admin/registration_application": {
      "get": {
        "operationId": "GetRegistrationApplication",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationApplicationResponse"
                }
              }
            }
          }
        },
        "summary": "Get the application a user submitted when they first registered their account",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "person_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PersonId"
            }
          }
        ]
      }
    },
    "/api/v4/admin/purge/person": {
      "post": {
        "operationId": "PurgePerson",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Purge / Delete a person from the database.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurgePerson"
              }
            }
          }
        }
      }
    },
    "/api/v4/admin/purge/community": {
      "post": {
        "operationId": "PurgeCommunity",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Purge / Delete a community from the database.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurgeCommunity"
              }
            }
          }
        }
      }
    },
    "/api/v4/admin/purge/post": {
      "post": {
        "operationId": "PurgePost",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Purge / Delete a post from the database.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurgePost"
              }
            }
          }
        }
      }
    },
    "/api/v4/admin/purge/comment": {
      "post": {
        "operationId": "PurgeComment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Purge / Delete a comment from the database.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurgeComment"
              }
            }
          }
        }
      }
    },
    "/api/v4/custom_emoji": {
      "post": {
        "operationId": "CreateCustomEmoji",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEmojiResponse"
                }
              }
            }
          }
        },
        "summary": "Create a new custom emoji.",
        "tags": [
          "CustomEmoji"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomEmoji"
              }
            }
          }
        }
      },
      "put": {
        "operationId": "EditCustomEmoji",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEmojiResponse"
                }
              }
            }
          }
        },
        "summary": "Edit an existing custom emoji.",
        "tags": [
          "CustomEmoji"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCustomEmoji"
              }
            }
          }
        }
      }
    },
    "/api/v4/custom_emoji/delete": {
      "post": {
        "operationId": "DeleteCustomEmoji",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Delete a custom emoji.",
        "tags": [
          "CustomEmoji"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCustomEmoji"
              }
            }
          }
        }
      }
    },
    "/api/v4/custom_emoji/list": {
      "get": {
        "operationId": "ListCustomEmojis",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCustomEmojisResponse"
                }
              }
            }
          }
        },
        "summary": "List custom emojis",
        "tags": [
          "CustomEmoji"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ignore_page_limits",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "category",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ]
      }
    },
    "/api/v4/admin/tagline": {
      "post": {
        "operationId": "CreateTagline",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaglineResponse"
                }
              }
            }
          }
        },
        "summary": "Create a new tagline",
        "tags": [
          "Admin",
          "Tagline"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagline"
              }
            }
          }
        }
      },
      "put": {
        "operationId": "EditTagline",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaglineResponse"
                }
              }
            }
          }
        },
        "summary": "Edit an existing tagline",
        "tags": [
          "Admin",
          "Tagline"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagline"
              }
            }
          }
        }
      }
    },
    "/api/v4/admin/tagline/delete": {
      "post": {
        "operationId": "DeleteTagline",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Delete a tagline",
        "tags": [
          "Admin",
          "Tagline"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagline"
              }
            }
          }
        }
      }
    },
    "/api/v4/admin/tagline/list": {
      "get": {
        "operationId": "ListTaglines",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTaglinesResponse"
                }
              }
            }
          }
        },
        "summary": "List taglines.",
        "tags": [
          "Admin",
          "Tagline"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ]
      }
    },
    "/api/v4/oauth_provider": {
      "post": {
        "operationId": "CreateOAuthProvider",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthProvider"
                }
              }
            }
          }
        },
        "summary": "Create a new oauth provider method",
        "tags": [
          "Miscellaneous",
          "OAuth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOAuthProvider"
              }
            }
          }
        }
      },
      "put": {
        "operationId": "EditOAuthProvider",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthProvider"
                }
              }
            }
          }
        },
        "summary": "Edit an existing oauth provider method",
        "tags": [
          "Miscellaneous",
          "OAuth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditOAuthProvider"
              }
            }
          }
        }
      }
    },
    "/api/v4/oauth_provider/delete": {
      "post": {
        "operationId": "DeleteOAuthProvider",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Delete an oauth provider method",
        "tags": [
          "Miscellaneous",
          "OAuth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteOAuthProvider"
              }
            }
          }
        }
      }
    },
    "/api/v4/oauth/authenticate": {
      "post": {
        "operationId": "AuthenticateWithOAuth",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          }
        },
        "summary": "Authenticate with OAuth",
        "tags": [
          "Miscellaneous",
          "OAuth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticateWithOauth"
              }
            }
          }
        }
      }
    },
    "/api/v4/federated_instances": {
      "get": {
        "operationId": "GetFederatedInstances",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFederatedInstancesResponse"
                }
              }
            }
          }
        },
        "summary": "Fetch federated instances.",
        "tags": [
          "Miscellaneous"
        ],
        "security": [],
        "parameters": []
      }
    },
    "/api/v4/report/list": {
      "get": {
        "operationId": "ListReports",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListReportsResponse"
                }
              }
            }
          }
        },
        "summary": "List user reports.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page_back",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "page_cursor",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ReportCombinedPaginationCursor"
            }
          },
          {
            "description": "if no community is given, it returns reports for all communities moderated by the auth user",
            "in": "query",
            "name": "community_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommunityId"
            }
          },
          {
            "description": "Filter by the post id. Can return either comment or post reports.",
            "in": "query",
            "name": "post_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PostId"
            }
          },
          {
            "description": "Filter the type of report.",
            "in": "query",
            "name": "type_",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ReportType"
            }
          },
          {
            "description": "Only shows the unresolved reports",
            "in": "query",
            "name": "unresolved_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/v4/account/block/instance": {
      "post": {
        "operationId": "UserBlockInstance",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Block an instance as user.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserBlockInstanceParams"
              }
            }
          }
        }
      }
    },
    "/api/v4/admin/instance/block": {
      "post": {
        "operationId": "AdminBlockInstance",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Globally block an instance as admin.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminBlockInstanceParams"
              }
            }
          }
        }
      }
    },
    "/api/v4/admin/instance/allow": {
      "post": {
        "operationId": "AdminAllowInstance",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Globally allow an instance as admin.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminAllowInstanceParams"
              }
            }
          }
        }
      }
    },
    "/api/v4/account/avatar": {
      "post": {
        "operationId": "UploadUserAvatar",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Upload new user avatar.",
        "tags": [
          "Account",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "image"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteUserAvatar",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Delete the user avatar.",
        "tags": [
          "Account",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/account/banner": {
      "post": {
        "operationId": "UploadUserBanner",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Upload new user banner.",
        "tags": [
          "Account",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "image"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteUserBanner",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Delete the user banner.",
        "tags": [
          "Account",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/community/icon": {
      "post": {
        "operationId": "UploadCommunityIcon",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Upload new community icon.",
        "tags": [
          "Community",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "image"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteCommunityIcon",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Delete the community icon.",
        "tags": [
          "Community",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/community/banner": {
      "post": {
        "operationId": "UploadCommunityBanner",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Upload new community banner.",
        "tags": [
          "Community",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "image"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteCommunityBanner",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Delete the community banner.",
        "tags": [
          "Community",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/site/icon": {
      "post": {
        "operationId": "UploadSiteIcon",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Upload new site icon.",
        "tags": [
          "Site",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "image"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteSiteIcon",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Delete the site icon.",
        "tags": [
          "Site",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/site/banner": {
      "post": {
        "operationId": "UploadSiteBanner",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Upload new site banner.",
        "tags": [
          "Site",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "image"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteSiteBanner",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Delete the site banner.",
        "tags": [
          "Site",
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": []
      }
    },
    "/api/v4/image": {
      "post": {
        "operationId": "UploadImage",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadImageResponse"
                }
              }
            }
          }
        },
        "summary": "Upload an image to the server.",
        "tags": [
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "image"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteImage",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Delete a pictrs image",
        "tags": [
          "Media"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filename",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4/image/health": {
      "get": {
        "operationId": "ImageHealth",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "summary": "Health check for image functionality",
        "tags": [
          "Media"
        ],
        "security": [],
        "parameters": []
      }
    }
  },
  "servers": [
    {
      "url": "https://voyager.lemmy.ml",
      "description": "Lemmy Voyager: Testing environment"
    },
    {
      "url": "https://ds9.lemmy.ml",
      "description": "Lemmy ds9: Testing environment"
    },
    {
      "url": "https://enterprise.lemmy.ml",
      "description": "Lemmy Enterprise: Testing environment"
    },
    {
      "url": "http://localhost:8536",
      "description": "Local testing environment"
    },
    {
      "url": "https://lemmy.ml",
      "description": "Lemmy.ml"
    },
    {
      "url": "https://lemmy.world",
      "description": "Lemmy.world"
    }
  ]
}